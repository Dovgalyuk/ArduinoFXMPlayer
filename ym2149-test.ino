#pragma GCC optimize ("-O3")
#include <util/delay.h>
#include "ym2149.h"
#include "Z80.h"
/*
// Tetris0
#define ROM_ADDR (34090 - 10)
const uint8_t rom[] PROGMEM = {
  0xcd, (ROM_ADDR + 10), (ROM_ADDR + 10) >> 8,
  0x76,
  0xcd, ROM_ADDR + 16, (ROM_ADDR + 16) >> 8,
  0xc3, ROM_ADDR + 3, (ROM_ADDR + 3) >> 8,

0xc3, 0x33, 0x85, 0xc3, 0x88, 0x85, 0xc3, 0xf3, 0x86, 0xf3, 0x2a, 0xe4, 0x89, 0x22, 0x0f, 0x86, 
0x2a, 0xe6, 0x89, 0x22, 0x23, 0x86, 0x2a, 0xe8, 0x89, 0x22, 0x37, 0x86, 0x3e, 0x01, 0x32, 0x11, 
0x86, 0x32, 0x25, 0x86, 0x32, 0x39, 0x86, 0x3e, 0x08, 0x32, 0x12, 0x86, 0x32, 0x26, 0x86, 0x32, 
0x3a, 0x86, 0x21, 0xcf, 0x85, 0x11, 0x20, 0x00, 0x22, 0xa9, 0x85, 0x19, 0x22, 0xab, 0x85, 0x19, 
0x22, 0xad, 0x85, 0x21, 0x00, 0x00, 0x22, 0x1d, 0x86, 0x22, 0x31, 0x86, 0x22, 0x45, 0x86, 0x22, 
0x1f, 0x86, 0x22, 0x33, 0x86, 0x22, 0x47, 0x86, 0xaf, 0x32, 0xa3, 0x85, 0xfb, 0xc9, 0xf3, 0x3e, 
0xff, 0x16, 0x07, 0xcd, 0x4a, 0x87, 0xcd, 0x34, 0x87, 0xfb, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xbf, 0x0f, 0xdc, 0x0e, 0x07, 0x0e, 0x3d, 0x0d, 0x7f, 0x0c, 0xcc, 0x0b, 0x22, 0x0b, 0x82, 
0x0a, 0xeb, 0x09, 0x5d, 0x09, 0xd6, 0x08, 0x57, 0x08, 0xdf, 0x07, 0x6e, 0x07, 0x03, 0x07, 0x9f, 
0x06, 0x40, 0x06, 0xe6, 0x05, 0x91, 0x05, 0x41, 0x05, 0xf6, 0x04, 0xae, 0x04, 0x6b, 0x04, 0x2c, 
0x04, 0xf0, 0x03, 0xb7, 0x03, 0x82, 0x03, 0x4f, 0x03, 0x20, 0x03, 0xf3, 0x02, 0xc8, 0x02, 0xa1, 
0x02, 0x7b, 0x02, 0x57, 0x02, 0x36, 0x02, 0x16, 0x02, 0xf8, 0x01, 0xdc, 0x01, 0xc1, 0x01, 0xa8, 
0x01, 0x90, 0x01, 0x79, 0x01, 0x64, 0x01, 0x50, 0x01, 0x3d, 0x01, 0x2c, 0x01, 0x1b, 0x01, 0x0b, 
0x01, 0xfc, 0x00, 0xee, 0x00, 0xe0, 0x00, 0xd4, 0x00, 0xc8, 0x00, 0xbd, 0x00, 0xb2, 0x00, 0xa8, 
0x00, 0x9f, 0x00, 0x96, 0x00, 0x8d, 0x00, 0x85, 0x00, 0x7e, 0x00, 0x77, 0x00, 0x70, 0x00, 0x6a, 
0x00, 0x64, 0x00, 0x5e, 0x00, 0x59, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x47, 0x00, 0x43, 
0x00, 0x3f, 0x00, 0x3b, 0x00, 0x38, 0x00, 0x35, 0x00, 0x32, 0x00, 0x2f, 0x00, 0x2d, 0x00, 0x2a, 
0x00, 0x28, 0x00, 0x25, 0x00, 0x23, 0x00, 0x21, 0x00, 0xdd, 0x21, 0x0f, 0x86, 0x2a, 0xa9, 0x85, 
0x3e, 0x01, 0xcd, 0x5f, 0x87, 0x22, 0xa9, 0x85, 0xdd, 0x21, 0x23, 0x86, 0x2a, 0xab, 0x85, 0x3e, 
0x02, 0xcd, 0x5f, 0x87, 0x22, 0xab, 0x85, 0xdd, 0x21, 0x37, 0x86, 0x2a, 0xad, 0x85, 0x3e, 0x03, 
0xcd, 0x5f, 0x87, 0x22, 0xad, 0x85, 0x3a, 0x3a, 0x86, 0x07, 0x47, 0x3a, 0x26, 0x86, 0xb0, 0x07, 
0x47, 0x3a, 0x12, 0x86, 0xb0, 0x16, 0x07, 0xcd, 0x4a, 0x87, 0x16, 0x0d, 0x21, 0xa2, 0x85, 0x7a, 
0x01, 0xfd, 0xff, 0xed, 0x79, 0x7e, 0x06, 0xbf, 0xed, 0x79, 0x2b, 0x15, 0xf2, 0x39, 0x87, 0xc9, 
0x01, 0x95, 0x85, 0x6a, 0x26, 0x00, 0x09, 0x77, 0xc9, 0xed, 0x73, 0xa7, 0x85, 0x2a, 0xa7, 0x85, 
0xed, 0x7b, 0xa5, 0x85, 0xc9, 0xed, 0x73, 0xa5, 0x85, 0xf9, 0x32, 0xa4, 0x85, 0xdd, 0x35, 0x02, 
0xca, 0x6e, 0x88, 0xdd, 0x35, 0x06, 0x20, 0x36, 0xdd, 0x6e, 0x04, 0xdd, 0x66, 0x05, 0x7e, 0xfe, 
0x80, 0x20, 0x0c, 0x23, 0x5e, 0x23, 0x56, 0xdd, 0x73, 0x04, 0xdd, 0x72, 0x05, 0x18, 0xe9, 0xfe, 
0x1e, 0x38, 0x0c, 0xd6, 0x32, 0xdd, 0x77, 0x09, 0xdd, 0x36, 0x06, 0x01, 0x23, 0x18, 0x09, 0xdd, 
0x77, 0x09, 0x23, 0x7e, 0xdd, 0x77, 0x06, 0x23, 0xdd, 0x75, 0x04, 0xdd, 0x74, 0x05, 0xdd, 0x7e, 
0x07, 0xdd, 0xb6, 0x08, 0xca, 0x31, 0x88, 0xdd, 0xcb, 0x0e, 0x56, 0xc2, 0x31, 0x88, 0xdd, 0x6e, 
0x0c, 0xdd, 0x66, 0x0d, 0x7e, 0x23, 0xdd, 0x75, 0x0c, 0xdd, 0x74, 0x0d, 0xfe, 0x80, 0x20, 0x06, 
0x7e, 0x23, 0x66, 0x6f, 0x18, 0xee, 0xfe, 0x82, 0xc2, 0xdc, 0x87, 0xdd, 0xcb, 0x0e, 0xde, 0xc3, 
0xbe, 0x87, 0xfe, 0x83, 0xc2, 0xe8, 0x87, 0xdd, 0xcb, 0x0e, 0x9e, 0xc3, 0xbe, 0x87, 0xfe, 0x84, 
0xc2, 0xf8, 0x87, 0x3e, 0x09, 0xdd, 0xae, 0x03, 0xdd, 0x77, 0x03, 0xc3, 0xbe, 0x87, 0xdd, 0xcb, 
0x0e, 0x5e, 0xca, 0x1a, 0x88, 0xdd, 0x86, 0x12, 0xdd, 0x77, 0x12, 0x3d, 0x87, 0x5f, 0x16, 0x00, 
0x21, 0x4b, 0x86, 0x19, 0x7e, 0xdd, 0x77, 0x07, 0x23, 0x7e, 0xdd, 0x77, 0x08, 0xc3, 0x31, 0x88, 
0x5f, 0x16, 0x00, 0xdd, 0x6e, 0x07, 0xdd, 0x66, 0x08, 0xe6, 0x80, 0xca, 0x2a, 0x88, 0x16, 0xff, 
0x19, 0xdd, 0x75, 0x07, 0xdd, 0x74, 0x08, 0x3a, 0xa3, 0x85, 0x16, 0x06, 0xcd, 0x4a, 0x87, 0xdd, 
0xcb, 0x0e, 0x96, 0x3a, 0xa4, 0x85, 0xc6, 0x07, 0x57, 0xdd, 0x7e, 0x07, 0xdd, 0xb6, 0x08, 0x28, 
0x03, 0xdd, 0x7e, 0x09, 0xcd, 0x4a, 0x87, 0x3a, 0xa4, 0x85, 0x3d, 0x87, 0x57, 0xdd, 0x7e, 0x07, 
0xcd, 0x4a, 0x87, 0x14, 0xdd, 0x7e, 0x08, 0xcd, 0x4a, 0x87, 0xc3, 0x53, 0x87, 0xdd, 0x75, 0x00, 
0xdd, 0x74, 0x01, 0xc9, 0xdd, 0x6e, 0x00, 0xdd, 0x66, 0x01, 0x7e, 0x23, 0xcd, 0x67, 0x88, 0xcb, 
0x7f, 0xc2, 0xeb, 0x88, 0x22, 0xa7, 0x85, 0xb7, 0x28, 0x1b, 0xdd, 0x86, 0x0f, 0xdd, 0x77, 0x12, 
0xdd, 0xcb, 0x0e, 0x9e, 0x3d, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x4b, 0x86, 0x19, 0x5e, 0x23, 0x56, 
0x2a, 0xa7, 0x85, 0x18, 0x03, 0x11, 0x00, 0x00, 0x7e, 0x23, 0xcd, 0x67, 0x88, 0xdd, 0x77, 0x02, 
0xdd, 0x73, 0x07, 0xdd, 0x72, 0x08, 0xdd, 0x7e, 0x10, 0xdd, 0x77, 0x0c, 0xdd, 0x7e, 0x11, 0xdd, 
0x77, 0x0d, 0xdd, 0xcb, 0x0e, 0xd6, 0xdd, 0xcb, 0x0e, 0x4e, 0xc2, 0x6d, 0x87, 0xdd, 0xcb, 0x0e, 
0x46, 0xca, 0xd2, 0x88, 0xdd, 0xcb, 0x0e, 0xce, 0xdd, 0x4e, 0x0a, 0xdd, 0x46, 0x0b, 0x0a, 0xdd, 
0x77, 0x09, 0x03, 0x0a, 0x03, 0xdd, 0x77, 0x06, 0xdd, 0x71, 0x04, 0xdd, 0x70, 0x05, 0xc3, 0x31, 
0x88, 0xe6, 0x7f, 0x22, 0xa7, 0x85, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x01, 0x89, 0x19, 0x7e, 0x23, 
0x66, 0x6f, 0xe5, 0x2a, 0xa7, 0x85, 0xc9, 0x1f, 0x89, 0x2b, 0x89, 0x39, 0x89, 0x43, 0x89, 0x55, 
0x89, 0x60, 0x89, 0x8d, 0x89, 0x6b, 0x89, 0x7b, 0x89, 0x86, 0x89, 0x9d, 0x89, 0xab, 0x89, 0xb9, 
0x89, 0xc6, 0x89, 0xd6, 0x89, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0xc3, 0x6e, 
0x88, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0x23, 0xe5, 0xc3, 0x6e, 0x88, 0x46, 
0xc5, 0x23, 0xe5, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 0x88, 0xd1, 0xc1, 0x10, 0x03, 0xc3, 0x6e, 0x88, 
0xc5, 0xd5, 0xdd, 0x73, 0x00, 0xdd, 0x72, 0x01, 0xc3, 0x6e, 0x88, 0x7e, 0x23, 0x32, 0xa3, 0x85, 
0xcd, 0x67, 0x88, 0xc3, 0x6e, 0x88, 0x7e, 0x23, 0xcd, 0x67, 0x88, 0xdd, 0x77, 0x03, 0xc3, 0x6e, 
0x88, 0x7e, 0xdd, 0x77, 0x0a, 0x23, 0x7e, 0xdd, 0x77, 0x0b, 0x23, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 
0x88, 0x7e, 0x23, 0xcd, 0x67, 0x88, 0xdd, 0x77, 0x0f, 0xc3, 0x6e, 0x88, 0xe1, 0xcd, 0x67, 0x88, 
0xc3, 0x6e, 0x88, 0x7e, 0xdd, 0x77, 0x10, 0x23, 0x7e, 0xdd, 0x77, 0x11, 0x23, 0xcd, 0x67, 0x88, 
0xc3, 0x6e, 0x88, 0xdd, 0xcb, 0x0e, 0xc6, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 
0x88, 0xdd, 0xcb, 0x0e, 0x86, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 0x88, 0x5e, 
0x23, 0x56, 0x23, 0xcd, 0x67, 0x88, 0x01, 0x6e, 0x88, 0xc5, 0xd5, 0xc9, 0x3a, 0xa3, 0x85, 0x86, 
0xe6, 0x1f, 0x32, 0xa3, 0x85, 0x23, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 0x88, 0x7e, 0xdd, 0x86, 0x0f, 
0xdd, 0x77, 0x0f, 0x23, 0xcd, 0x67, 0x88, 0xc3, 0x6e, 0x88, 0xea, 0x89, 0xea, 0x8a, 0x6a, 0x8b, 
0x86, 0x21, 0x8a, 0x87, 0x17, 0x8a, 0x28, 0xa0, 0x28, 0x28, 0x2a, 0x28, 0x28, 0x50, 0x29, 0xa0, 
0x29, 0x28, 0x2b, 0x28, 0x29, 0x50, 0x25, 0x50, 0x27, 0x50, 0x23, 0x28, 0x25, 0x28, 0x27, 0x50, 
0x24, 0x50, 0x26, 0x50, 0x29, 0x28, 0x2b, 0x28, 0x26, 0x50, 0x80, 0xea, 0x89, 0x0f, 0x08, 0x0e, 
0x09, 0x0d, 0x09, 0x0c, 0x09, 0x0b, 0x00, 0x82, 0x00, 0x04, 0x00, 0x03, 0x00, 0x05, 0x00, 0x04, 
0x00, 0xf0, 0x80, 0x21, 0x8a, 0x87, 0x47, 0x8a, 0x85, 0x01, 0x8a, 0x82, 0x0a, 0x84, 0x1f, 0x07, 
0x01, 0x84, 0x0a, 0x07, 0x01, 0x83, 0x8b, 0x85, 0x08, 0x87, 0xdc, 0x8a, 0x89, 0x0f, 0x04, 0x0e, 
0x02, 0x0d, 0x02, 0x3e, 0x3d, 0x0a, 0x00, 0x82, 0x02, 0x81, 0x2f, 0x8a, 0x8e, 0x01, 0x29, 0x13, 
0x29, 0x14, 0x2b, 0x14, 0x24, 0x3c, 0x2b, 0x05, 0x29, 0x05, 0x28, 0x05, 0x29, 0x05, 0x2b, 0x14, 
0x2d, 0x05, 0x2b, 0x05, 0x29, 0x05, 0x2b, 0x05, 0x2d, 0x14, 0x2f, 0x05, 0x2d, 0x05, 0x2b, 0x05, 
0x2d, 0x05, 0x2f, 0x14, 0x30, 0x3d, 0x83, 0x81, 0x2f, 0x8a, 0x2c, 0x13, 0x2c, 0x14, 0x2b, 0x0a, 
0x2c, 0x0a, 0x2e, 0x14, 0x2c, 0x14, 0x2c, 0x14, 0x2b, 0x05, 0x29, 0x05, 0x2b, 0x05, 0x27, 0x05, 
0x2a, 0x14, 0x29, 0x14, 0x29, 0x14, 0x29, 0x05, 0x27, 0x05, 0x29, 0x05, 0x25, 0x04, 0x00, 0x01, 
0x25, 0x14, 0x27, 0x3d, 0x81, 0x2f, 0x8a, 0x2b, 0x13, 0x2b, 0x14, 0x2a, 0x0a, 0x2b, 0x0a, 0x32, 
0x14, 0x2d, 0x14, 0x2b, 0x14, 0x2a, 0x05, 0x28, 0x05, 0x2a, 0x05, 0x26, 0x05, 0x30, 0x14, 0x2f, 
0x14, 0x2f, 0x14, 0x2f, 0x05, 0x2d, 0x05, 0x2f, 0x05, 0x2b, 0x04, 0x00, 0x01, 0x2b, 0x14, 0x2d, 
0x3d, 0x89, 0x00, 0x01, 0x0f, 0x02, 0x0e, 0x00, 0x82, 0x00, 0x0c, 0x00, 0xf4, 0x80, 0xe2, 0x8a, 
0x87, 0x51, 0x8b, 0x86, 0x59, 0x8b, 0x88, 0x00, 0x82, 0x08, 0x81, 0x38, 0x8b, 0x83, 0x88, 0x01, 
0x82, 0x08, 0x81, 0x38, 0x8b, 0x83, 0x88, 0xfd, 0x81, 0x35, 0x8b, 0x88, 0xff, 0x81, 0x35, 0x8b, 
0x88, 0xfb, 0x81, 0x38, 0x8b, 0x88, 0xfd, 0x81, 0x38, 0x8b, 0x88, 0xff, 0x81, 0x35, 0x8b, 0x88, 
0xfc, 0x81, 0x35, 0x8b, 0x88, 0xfe, 0x81, 0x35, 0x8b, 0x88, 0x01, 0x81, 0x38, 0x8b, 0x88, 0x03, 
0x81, 0x38, 0x8b, 0x88, 0xfe, 0x81, 0x35, 0x8b, 0x80, 0xea, 0x8a, 0x81, 0x38, 0x8b, 0x8e, 0xf4, 
0x34, 0x04, 0x38, 0x04, 0x3b, 0x04, 0x40, 0x04, 0x44, 0x04, 0x47, 0x04, 0x44, 0x04, 0x40, 0x04, 
0x3b, 0x04, 0x38, 0x04, 0x8e, 0x0c, 0x89, 0x0e, 0x01, 0x3f, 0x3e, 0x3d, 0x80, 0x51, 0x8b, 0x00, 
0x80, 0x59, 0x8b, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x5d, 0x8b, 
0x88, 0x16, 0x86, 0x5d, 0x8b, 0x81, 0x51, 0x8a, 0x88, 0x0a, 0x86, 0xe2, 0x8a, 0x81, 0x51, 0x8a, 
0x80, 0x6a, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 
};
*/
  /*
// Tetris1
#define ROM_ADDR (50455 - 10)
const uint8_t rom[] PROGMEM = {
  0xcd, 0x17, 0xc5, // C50D
  0x76,             // C510
  0xcd, 0x1d, 0xc5, // C511
  0xc3, 0x10, 0xc5, // C514
  // 0xc517
0xc3, 0x20, 0xc5, 0xc3, 0x75, 0xc5, 0xc3, 0xe0, 0xc6, 0xf3, 0x2a, 0xd1, 0xc9, 0x22, 0xfc, 0xc5, 
0x2a, 0xd3, 0xc9, 0x22, 0x10, 0xc6, 0x2a, 0xd5, 0xc9, 0x22, 0x24, 0xc6, 0x3e, 0x01, 0x32, 0xfe, 
0xc5, 0x32, 0x12, 0xc6, 0x32, 0x26, 0xc6, 0x3e, 0x08, 0x32, 0xff, 0xc5, 0x32, 0x13, 0xc6, 0x32, 
0x27, 0xc6, 0x21, 0xbc, 0xc5, 0x11, 0x20, 0x00, 0x22, 0x96, 0xc5, 0x19, 0x22, 0x98, 0xc5, 0x19, 
0x22, 0x9a, 0xc5, 0x21, 0x00, 0x00, 0x22, 0x0a, 0xc6, 0x22, 0x1e, 0xc6, 0x22, 0x32, 0xc6, 0x22, 
0x0c, 0xc6, 0x22, 0x20, 0xc6, 0x22, 0x34, 0xc6, 0xaf, 0x32, 0x90, 0xc5, 0xfb, 0xc9, 0xf3, 0x3e, 
0xff, 0x16, 0x07, 0xcd, 0x37, 0xc7, 0xcd, 0x21, 0xc7, 0xfb, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xbf, 0x0f, 0xdc, 0x0e, 0x07, 0x0e, 0x3d, 0x0d, 0x7f, 0x0c, 0xcc, 0x0b, 0x22, 0x0b, 0x82, 
0x0a, 0xeb, 0x09, 0x5d, 0x09, 0xd6, 0x08, 0x57, 0x08, 0xdf, 0x07, 0x6e, 0x07, 0x03, 0x07, 0x9f, 
0x06, 0x40, 0x06, 0xe6, 0x05, 0x91, 0x05, 0x41, 0x05, 0xf6, 0x04, 0xae, 0x04, 0x6b, 0x04, 0x2c, 
0x04, 0xf0, 0x03, 0xb7, 0x03, 0x82, 0x03, 0x4f, 0x03, 0x20, 0x03, 0xf3, 0x02, 0xc8, 0x02, 0xa1, 
0x02, 0x7b, 0x02, 0x57, 0x02, 0x36, 0x02, 0x16, 0x02, 0xf8, 0x01, 0xdc, 0x01, 0xc1, 0x01, 0xa8, 
0x01, 0x90, 0x01, 0x79, 0x01, 0x64, 0x01, 0x50, 0x01, 0x3d, 0x01, 0x2c, 0x01, 0x1b, 0x01, 0x0b, 
0x01, 0xfc, 0x00, 0xee, 0x00, 0xe0, 0x00, 0xd4, 0x00, 0xc8, 0x00, 0xbd, 0x00, 0xb2, 0x00, 0xa8, 
0x00, 0x9f, 0x00, 0x96, 0x00, 0x8d, 0x00, 0x85, 0x00, 0x7e, 0x00, 0x77, 0x00, 0x70, 0x00, 0x6a, 
0x00, 0x64, 0x00, 0x5e, 0x00, 0x59, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x47, 0x00, 0x43, 
0x00, 0x3f, 0x00, 0x3b, 0x00, 0x38, 0x00, 0x35, 0x00, 0x32, 0x00, 0x2f, 0x00, 0x2d, 0x00, 0x2a, 
0x00, 0x28, 0x00, 0x25, 0x00, 0x23, 0x00, 0x21, 0x00, 0xdd, 0x21, 0xfc, 0xc5, 0x2a, 0x96, 0xc5, 
0x3e, 0x01, 0xcd, 0x4c, 0xc7, 0x22, 0x96, 0xc5, 0xdd, 0x21, 0x10, 0xc6, 0x2a, 0x98, 0xc5, 0x3e, 
0x02, 0xcd, 0x4c, 0xc7, 0x22, 0x98, 0xc5, 0xdd, 0x21, 0x24, 0xc6, 0x2a, 0x9a, 0xc5, 0x3e, 0x03, 
0xcd, 0x4c, 0xc7, 0x22, 0x9a, 0xc5, 0x3a, 0x27, 0xc6, 0x07, 0x47, 0x3a, 0x13, 0xc6, 0xb0, 0x07, 
0x47, 0x3a, 0xff, 0xc5, 0xb0, 0x16, 0x07, 0xcd, 0x37, 0xc7, 0x16, 0x0d, 0x21, 0x8f, 0xc5, 0x7a, 
0x01, 0xfd, 0xff, 0xed, 0x79, 0x7e, 0x06, 0xbf, 0xed, 0x79, 0x2b, 0x15, 0xf2, 0x26, 0xc7, 0xc9, 
0x01, 0x82, 0xc5, 0x6a, 0x26, 0x00, 0x09, 0x77, 0xc9, 0xed, 0x73, 0x94, 0xc5, 0x2a, 0x94, 0xc5, 
0xed, 0x7b, 0x92, 0xc5, 0xc9, 0xed, 0x73, 0x92, 0xc5, 0xf9, 0x32, 0x91, 0xc5, 0xdd, 0x35, 0x02, 
0xca, 0x5b, 0xc8, 0xdd, 0x35, 0x06, 0x20, 0x36, 0xdd, 0x6e, 0x04, 0xdd, 0x66, 0x05, 0x7e, 0xfe, 
0x80, 0x20, 0x0c, 0x23, 0x5e, 0x23, 0x56, 0xdd, 0x73, 0x04, 0xdd, 0x72, 0x05, 0x18, 0xe9, 0xfe, 
0x1e, 0x38, 0x0c, 0xd6, 0x32, 0xdd, 0x77, 0x09, 0xdd, 0x36, 0x06, 0x01, 0x23, 0x18, 0x09, 0xdd, 
0x77, 0x09, 0x23, 0x7e, 0xdd, 0x77, 0x06, 0x23, 0xdd, 0x75, 0x04, 0xdd, 0x74, 0x05, 0xdd, 0x7e, 
0x07, 0xdd, 0xb6, 0x08, 0xca, 0x1e, 0xc8, 0xdd, 0xcb, 0x0e, 0x56, 0xc2, 0x1e, 0xc8, 0xdd, 0x6e, 
0x0c, 0xdd, 0x66, 0x0d, 0x7e, 0x23, 0xdd, 0x75, 0x0c, 0xdd, 0x74, 0x0d, 0xfe, 0x80, 0x20, 0x06, 
0x7e, 0x23, 0x66, 0x6f, 0x18, 0xee, 0xfe, 0x82, 0xc2, 0xc9, 0xc7, 0xdd, 0xcb, 0x0e, 0xde, 0xc3, 
0xab, 0xc7, 0xfe, 0x83, 0xc2, 0xd5, 0xc7, 0xdd, 0xcb, 0x0e, 0x9e, 0xc3, 0xab, 0xc7, 0xfe, 0x84, 
0xc2, 0xe5, 0xc7, 0x3e, 0x09, 0xdd, 0xae, 0x03, 0xdd, 0x77, 0x03, 0xc3, 0xab, 0xc7, 0xdd, 0xcb, 
0x0e, 0x5e, 0xca, 0x07, 0xc8, 0xdd, 0x86, 0x12, 0xdd, 0x77, 0x12, 0x3d, 0x87, 0x5f, 0x16, 0x00, 
0x21, 0x38, 0xc6, 0x19, 0x7e, 0xdd, 0x77, 0x07, 0x23, 0x7e, 0xdd, 0x77, 0x08, 0xc3, 0x1e, 0xc8, 
0x5f, 0x16, 0x00, 0xdd, 0x6e, 0x07, 0xdd, 0x66, 0x08, 0xe6, 0x80, 0xca, 0x17, 0xc8, 0x16, 0xff, 
0x19, 0xdd, 0x75, 0x07, 0xdd, 0x74, 0x08, 0x3a, 0x90, 0xc5, 0x16, 0x06, 0xcd, 0x37, 0xc7, 0xdd, 
0xcb, 0x0e, 0x96, 0x3a, 0x91, 0xc5, 0xc6, 0x07, 0x57, 0xdd, 0x7e, 0x07, 0xdd, 0xb6, 0x08, 0x28, 
0x03, 0xdd, 0x7e, 0x09, 0xcd, 0x37, 0xc7, 0x3a, 0x91, 0xc5, 0x3d, 0x87, 0x57, 0xdd, 0x7e, 0x07, 
0xcd, 0x37, 0xc7, 0x14, 0xdd, 0x7e, 0x08, 0xcd, 0x37, 0xc7, 0xc3, 0x40, 0xc7, 0xdd, 0x75, 0x00, 
0xdd, 0x74, 0x01, 0xc9, 0xdd, 0x6e, 0x00, 0xdd, 0x66, 0x01, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xcb, 
0x7f, 0xc2, 0xd8, 0xc8, 0x22, 0x94, 0xc5, 0xb7, 0x28, 0x1b, 0xdd, 0x86, 0x0f, 0xdd, 0x77, 0x12, 
0xdd, 0xcb, 0x0e, 0x9e, 0x3d, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x38, 0xc6, 0x19, 0x5e, 0x23, 0x56, 
0x2a, 0x94, 0xc5, 0x18, 0x03, 0x11, 0x00, 0x00, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xdd, 0x77, 0x02, 
0xdd, 0x73, 0x07, 0xdd, 0x72, 0x08, 0xdd, 0x7e, 0x10, 0xdd, 0x77, 0x0c, 0xdd, 0x7e, 0x11, 0xdd, 
0x77, 0x0d, 0xdd, 0xcb, 0x0e, 0xd6, 0xdd, 0xcb, 0x0e, 0x4e, 0xc2, 0x5a, 0xc7, 0xdd, 0xcb, 0x0e, 
0x46, 0xca, 0xbf, 0xc8, 0xdd, 0xcb, 0x0e, 0xce, 0xdd, 0x4e, 0x0a, 0xdd, 0x46, 0x0b, 0x0a, 0xdd, 
0x77, 0x09, 0x03, 0x0a, 0x03, 0xdd, 0x77, 0x06, 0xdd, 0x71, 0x04, 0xdd, 0x70, 0x05, 0xc3, 0x1e, 
0xc8, 0xe6, 0x7f, 0x22, 0x94, 0xc5, 0x87, 0x5f, 0x16, 0x00, 0x21, 0xee, 0xc8, 0x19, 0x7e, 0x23, 
0x66, 0x6f, 0xe5, 0x2a, 0x94, 0xc5, 0xc9, 0x0c, 0xc9, 0x18, 0xc9, 0x26, 0xc9, 0x30, 0xc9, 0x42, 
0xc9, 0x4d, 0xc9, 0x7a, 0xc9, 0x58, 0xc9, 0x68, 0xc9, 0x73, 0xc9, 0x8a, 0xc9, 0x98, 0xc9, 0xa6, 
0xc9, 0xb3, 0xc9, 0xc3, 0xc9, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0xc3, 0x5b, 
0xc8, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0x23, 0xe5, 0xc3, 0x5b, 0xc8, 0x46, 
0xc5, 0x23, 0xe5, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0xd1, 0xc1, 0x10, 0x03, 0xc3, 0x5b, 0xc8, 
0xc5, 0xd5, 0xdd, 0x73, 0x00, 0xdd, 0x72, 0x01, 0xc3, 0x5b, 0xc8, 0x7e, 0x23, 0x32, 0x90, 0xc5, 
0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xdd, 0x77, 0x03, 0xc3, 0x5b, 
0xc8, 0x7e, 0xdd, 0x77, 0x0a, 0x23, 0x7e, 0xdd, 0x77, 0x0b, 0x23, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 
0xc8, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xdd, 0x77, 0x0f, 0xc3, 0x5b, 0xc8, 0xe1, 0xcd, 0x54, 0xc8, 
0xc3, 0x5b, 0xc8, 0x7e, 0xdd, 0x77, 0x10, 0x23, 0x7e, 0xdd, 0x77, 0x11, 0x23, 0xcd, 0x54, 0xc8, 
0xc3, 0x5b, 0xc8, 0xdd, 0xcb, 0x0e, 0xc6, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 
0xc8, 0xdd, 0xcb, 0x0e, 0x86, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0x5e, 
0x23, 0x56, 0x23, 0xcd, 0x54, 0xc8, 0x01, 0x5b, 0xc8, 0xc5, 0xd5, 0xc9, 0x3a, 0x90, 0xc5, 0x86, 
0xe6, 0x1f, 0x32, 0x90, 0xc5, 0x23, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0x7e, 0xdd, 0x86, 0x0f, 
0xdd, 0x77, 0x0f, 0x23, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0xd7, 0xc9, 0x54, 0xcb, 0x17, 0xcc, 
0x87, 0x3f, 0xca, 0x86, 0x37, 0xca, 0x81, 0x6a, 0xca, 0x34, 0x50, 0x00, 0x50, 0x82, 0x02, 0x81, 
0xc2, 0xca, 0x81, 0xc2, 0xca, 0x81, 0x7d, 0xca, 0x83, 0x86, 0x08, 0xcd, 0x87, 0xd8, 0xcc, 0x82, 
0x03, 0x28, 0x32, 0x28, 0x14, 0x28, 0x0a, 0x2d, 0x32, 0x2c, 0x0a, 0x2b, 0x0a, 0x2a, 0x0a, 0x83, 
0x28, 0x32, 0x28, 0x14, 0x28, 0x0a, 0x82, 0x04, 0x2f, 0x05, 0x83, 0x2d, 0x0a, 0x2d, 0x05, 0x88, 
0xf1, 0x82, 0x0f, 0x38, 0x01, 0x8e, 0x01, 0x00, 0x02, 0x83, 0x82, 0x02, 0x81, 0xc2, 0xca, 0x88, 
0x02, 0x81, 0xc2, 0xca, 0x81, 0x7d, 0xca, 0x88, 0x00, 0x81, 0x49, 0xca, 0x83, 0x80, 0xd7, 0xc9, 
0x02, 0xfe, 0xfb, 0x05, 0x00, 0x80, 0x37, 0xca, 0x0f, 0x01, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x80, 
0x3f, 0xca, 0x86, 0x08, 0xcd, 0x87, 0xd8, 0xcc, 0x31, 0x0a, 0x31, 0x0a, 0x31, 0x14, 0x31, 0x14, 
0x31, 0x0a, 0x2f, 0x14, 0x2f, 0x0a, 0x2f, 0x0a, 0x2f, 0x05, 0x2f, 0x05, 0x2d, 0x0a, 0x2d, 0x0a, 
0x2b, 0x14, 0x89, 0x34, 0x14, 0x37, 0x14, 0x3b, 0x14, 0x37, 0x14, 0x39, 0x28, 0x37, 0x14, 0x36, 
0x14, 0x3b, 0x28, 0x39, 0x28, 0x89, 0x86, 0x2f, 0xcb, 0x87, 0x27, 0xcb, 0x8e, 0x0c, 0x28, 0x50, 
0x27, 0x1e, 0x28, 0x1e, 0x27, 0x14, 0x00, 0x14, 0x27, 0x12, 0x00, 0x02, 0x27, 0x0a, 0x25, 0x0a, 
0x23, 0x0a, 0x25, 0x5a, 0x28, 0x50, 0x2a, 0x14, 0x2c, 0x0a, 0x2a, 0x14, 0x28, 0x1e, 0x25, 0x28, 
0x2d, 0x0a, 0x2c, 0x0a, 0x2a, 0x0a, 0x2c, 0x32, 0x24, 0x05, 0x25, 0x05, 0x26, 0x05, 0x27, 0x05, 
0x28, 0x05, 0x29, 0x05, 0x2a, 0x05, 0x2b, 0x05, 0x8e, 0xf4, 0x89, 0x86, 0x2f, 0xcb, 0x87, 0x27, 
0xcb, 0x82, 0x02, 0x38, 0x0a, 0x39, 0x0a, 0x00, 0x0a, 0x36, 0x0a, 0x38, 0x0a, 0x00, 0x0a, 0x34, 
0x0a, 0x36, 0x0a, 0x00, 0x0a, 0x33, 0x0a, 0x34, 0x0a, 0x00, 0x0a, 0x31, 0x0a, 0x33, 0x0a, 0x00, 
0x0a, 0x2f, 0x0a, 0x83, 0x31, 0x0a, 0x00, 0x46, 0x31, 0x28, 0x34, 0x14, 0x36, 0x0a, 0x34, 0x0a, 
0x00, 0x50, 0x86, 0x20, 0xcb, 0x87, 0x3a, 0xcb, 0x40, 0x05, 0x3f, 0x05, 0x3d, 0x05, 0x3b, 0x05, 
0x3f, 0x05, 0x3d, 0x05, 0x3b, 0x05, 0x39, 0x05, 0x3d, 0x05, 0x3b, 0x05, 0x39, 0x05, 0x38, 0x05, 
0x3b, 0x05, 0x39, 0x05, 0x38, 0x05, 0x36, 0x05, 0x89, 0x82, 0x00, 0x0c, 0xf4, 0x80, 0x21, 0xcb, 
0x0f, 0x01, 0x0e, 0x02, 0x0d, 0x02, 0x0c, 0x00, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 
0x80, 0x2f, 0xcb, 0x0f, 0x01, 0x40, 0x3f, 0x3e, 0x0b, 0x00, 0x0f, 0x01, 0x40, 0x3f, 0x3e, 0x3d, 
0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x00, 0x00, 0x82, 0x0c, 0xf4, 0x80, 0x4e, 0xcb, 0x00, 0xf0, 0x81, 
0x49, 0xca, 0x82, 0x02, 0x81, 0xbd, 0xcb, 0x81, 0xbd, 0xcb, 0x81, 0xa6, 0xcb, 0x83, 0x86, 0x4e, 
0xcb, 0x87, 0x41, 0xcb, 0x82, 0x04, 0x00, 0x0a, 0x34, 0x0a, 0x36, 0x0a, 0x34, 0x0a, 0x39, 0x14, 
0x38, 0x0a, 0x34, 0x0a, 0x00, 0x0a, 0x34, 0x0a, 0x36, 0x0a, 0x34, 0x0a, 0x39, 0x05, 0x39, 0x05, 
0x38, 0x0a, 0x34, 0x0a, 0x36, 0x0a, 0x83, 0x82, 0x02, 0x81, 0xbd, 0xcb, 0x88, 0x02, 0x81, 0xbd, 
0xcb, 0x81, 0xa6, 0xcb, 0x88, 0x01, 0x81, 0x49, 0xca, 0x88, 0x00, 0x83, 0x80, 0x54, 0xcb, 0x86, 
0x2f, 0xcb, 0x87, 0x27, 0xcb, 0x31, 0x50, 0x2f, 0x50, 0x2a, 0x8c, 0x2c, 0x14, 0x31, 0x50, 0x31, 
0x50, 0x2d, 0x50, 0x30, 0x50, 0x89, 0x87, 0xdb, 0xcb, 0x86, 0xd3, 0xcb, 0x82, 0x08, 0x34, 0x0a, 
0x34, 0x0a, 0x34, 0x0a, 0x34, 0x14, 0x34, 0x14, 0x34, 0x0a, 0x83, 0x89, 0x82, 0x07, 0x00, 0xf9, 
0x00, 0x80, 0xd3, 0xcb, 0x0d, 0x01, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 
0x00, 0x00, 0x87, 0xe7, 0xcc, 0x86, 0x08, 0xcd, 0x2b, 0x05, 0x2b, 0x05, 0x2b, 0x0a, 0x2b, 0x0a, 
0x2b, 0x05, 0x29, 0x0f, 0x2b, 0x0a, 0x2f, 0x14, 0x89, 0x0d, 0x01, 0x3d, 0x00, 0x04, 0x80, 0x00, 
0xcc, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x80, 0x08, 0xcc, 
0x86, 0x08, 0xcc, 0x87, 0x00, 0xcc, 0x88, 0xf4, 0x81, 0x6a, 0xca, 0x88, 0x01, 0x81, 0x49, 0xca, 
0x88, 0x00, 0x82, 0x02, 0x81, 0x92, 0xcc, 0x81, 0x92, 0xcc, 0x81, 0x67, 0xcc, 0x83, 0x82, 0x0c, 
0x81, 0xac, 0xcc, 0x83, 0x88, 0x05, 0x81, 0xa9, 0xcc, 0x88, 0x07, 0x81, 0xa9, 0xcc, 0x88, 0x00, 
0x82, 0x02, 0x81, 0x92, 0xcc, 0x88, 0x02, 0x81, 0x92, 0xcc, 0x81, 0x67, 0xcc, 0x88, 0x00, 0x87, 
0x27, 0xcb, 0x84, 0x14, 0x85, 0x01, 0x07, 0x28, 0x85, 0x08, 0x00, 0x78, 0x83, 0x80, 0x17, 0xcc, 
0x8e, 0xfd, 0x81, 0xa9, 0xcc, 0x8e, 0x07, 0x81, 0xa9, 0xcc, 0x8e, 0x03, 0x81, 0xa9, 0xcc, 0x8e, 
0xfb, 0x81, 0xa9, 0xcc, 0x8e, 0xfb, 0x81, 0xa9, 0xcc, 0x8e, 0x08, 0x81, 0xa9, 0xcc, 0x8e, 0xfd, 
0x81, 0xa9, 0xcc, 0x8e, 0x02, 0x81, 0xa9, 0xcc, 0x8e, 0xfc, 0x89, 0x82, 0x08, 0x81, 0xac, 0xcc, 
0x83, 0x8e, 0x05, 0x82, 0x04, 0x81, 0xac, 0xcc, 0x83, 0x8e, 0xfb, 0x82, 0x04, 0x81, 0xac, 0xcc, 
0x83, 0x89, 0x81, 0xac, 0xcc, 0x87, 0xd8, 0xcc, 0x84, 0x09, 0x85, 0x01, 0x07, 0x01, 0x85, 0x08, 
0x86, 0xf7, 0xcc, 0x10, 0x09, 0x84, 0x00, 0x85, 0x01, 0x07, 0x01, 0x85, 0x08, 0x1c, 0x09, 0x84, 
0x14, 0x85, 0x01, 0x8a, 0x82, 0x0a, 0x07, 0x01, 0x8d, 0x01, 0x83, 0x8b, 0x85, 0x08, 0x1c, 0x0a, 
0x89, 0x0f, 0x02, 0x0e, 0x02, 0x0d, 0x02, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x00, 0x00, 
0x0f, 0x01, 0x0e, 0x02, 0x0d, 0x02, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x00, 0x00, 
0xfc, 0xfe, 0x02, 0x04, 0x04, 0x02, 0xfe, 0xfc, 0x80, 0xf7, 0xcc, 0x82, 0x0c, 0xf4, 0x80, 0x03, 
0xcd, 0x1e, 0x80, 0x08, 0xcd, 
};
*/
// Tetris2
#define ROM_ADDR (51285 - 10)
const uint8_t rom[] PROGMEM = {
  0xcd, (ROM_ADDR + 10), (ROM_ADDR + 10) >> 8,
  0x76,
  0xcd, ROM_ADDR + 16, (ROM_ADDR + 16) >> 8,
  0xc3, ROM_ADDR + 3, (ROM_ADDR + 3) >> 8,
0xc3, 0x5e, 0xc8, 0xc3, 0xb3, 0xc8, 0xc3, 0x1e, 0xca, 0xf3, 0x2a, 0x0f, 0xcd, 0x22, 0x3a, 0xc9, 
0x2a, 0x11, 0xcd, 0x22, 0x4e, 0xc9, 0x2a, 0x13, 0xcd, 0x22, 0x62, 0xc9, 0x3e, 0x01, 0x32, 0x3c, 
0xc9, 0x32, 0x50, 0xc9, 0x32, 0x64, 0xc9, 0x3e, 0x08, 0x32, 0x3d, 0xc9, 0x32, 0x51, 0xc9, 0x32, 
0x65, 0xc9, 0x21, 0xfa, 0xc8, 0x11, 0x20, 0x00, 0x22, 0xd4, 0xc8, 0x19, 0x22, 0xd6, 0xc8, 0x19, 
0x22, 0xd8, 0xc8, 0x21, 0x00, 0x00, 0x22, 0x48, 0xc9, 0x22, 0x5c, 0xc9, 0x22, 0x70, 0xc9, 0x22, 
0x4a, 0xc9, 0x22, 0x5e, 0xc9, 0x22, 0x72, 0xc9, 0xaf, 0x32, 0xce, 0xc8, 0xfb, 0xc9, 0xf3, 0x3e, 
0xff, 0x16, 0x07, 0xcd, 0x75, 0xca, 0xcd, 0x5f, 0xca, 0xfb, 0xc9, 0x4e, 0x0a, 0xdd, 0x46, 0x0b, 
0x0a, 0xdd, 0x77, 0x09, 0x03, 0x0a, 0x03, 0xdd, 0x77, 0x06, 0xdd, 0x71, 0x04, 0xdd, 0x70, 0x05, 
0xc3, 0x1e, 0xc8, 0xe6, 0x7f, 0x22, 0x94, 0xc5, 0x87, 0x5f, 0x16, 0x00, 0x21, 0xee, 0xc8, 0x19, 
0x7e, 0x23, 0x66, 0x6f, 0xe5, 0x2a, 0x94, 0xc5, 0xc9, 0x0c, 0xc9, 0x18, 0xc9, 0x26, 0xc9, 0x30, 
0xc9, 0x42, 0xc9, 0x4d, 0xc9, 0x7a, 0xc9, 0x58, 0xc9, 0x68, 0xc9, 0x73, 0xc9, 0x8a, 0xc9, 0x98, 
0xc9, 0xa6, 0xc9, 0xb3, 0xc9, 0xc3, 0xc9, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 
0xc3, 0x5b, 0xc8, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0x23, 0xe5, 0xc3, 0x5b, 
0xc8, 0x46, 0xc5, 0x23, 0xe5, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0xd1, 0xc1, 0x10, 0x03, 0xc3, 
0x5b, 0xc8, 0xc5, 0xd5, 0xdd, 0x73, 0x00, 0xdd, 0x72, 0x01, 0xc3, 0x5b, 0xc8, 0x7e, 0x23, 0x32, 
0x90, 0xc5, 0xcd, 0x54, 0xc8, 0xc3, 0x5b, 0xc8, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xdd, 0x77, 0x03, 
0xc3, 0x5b, 0xc8, 0x7e, 0xdd, 0x77, 0x0a, 0x23, 0x7e, 0xdd, 0x77, 0x0b, 0x23, 0xcd, 0x54, 0xc8, 
0xc3, 0x5b, 0xc8, 0x7e, 0x23, 0xcd, 0x54, 0xc8, 0xdd, 0x77, 0x0f, 0xc3, 0x5b, 0xc8, 0xe1, 0xcd, 
0x54, 0xbf, 0x0f, 0xdc, 0x0e, 0x07, 0x0e, 0x3d, 0x0d, 0x7f, 0x0c, 0xcc, 0x0b, 0x22, 0x0b, 0x82, 
0x0a, 0xeb, 0x09, 0x5d, 0x09, 0xd6, 0x08, 0x57, 0x08, 0xdf, 0x07, 0x6e, 0x07, 0x03, 0x07, 0x9f, 
0x06, 0x40, 0x06, 0xe6, 0x05, 0x91, 0x05, 0x41, 0x05, 0xf6, 0x04, 0xae, 0x04, 0x6b, 0x04, 0x2c, 
0x04, 0xf0, 0x03, 0xb7, 0x03, 0x82, 0x03, 0x4f, 0x03, 0x20, 0x03, 0xf3, 0x02, 0xc8, 0x02, 0xa1, 
0x02, 0x7b, 0x02, 0x57, 0x02, 0x36, 0x02, 0x16, 0x02, 0xf8, 0x01, 0xdc, 0x01, 0xc1, 0x01, 0xa8, 
0x01, 0x90, 0x01, 0x79, 0x01, 0x64, 0x01, 0x50, 0x01, 0x3d, 0x01, 0x2c, 0x01, 0x1b, 0x01, 0x0b, 
0x01, 0xfc, 0x00, 0xee, 0x00, 0xe0, 0x00, 0xd4, 0x00, 0xc8, 0x00, 0xbd, 0x00, 0xb2, 0x00, 0xa8, 
0x00, 0x9f, 0x00, 0x96, 0x00, 0x8d, 0x00, 0x85, 0x00, 0x7e, 0x00, 0x77, 0x00, 0x70, 0x00, 0x6a, 
0x00, 0x64, 0x00, 0x5e, 0x00, 0x59, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x4b, 0x00, 0x47, 0x00, 0x43, 
0x00, 0x3f, 0x00, 0x3b, 0x00, 0x38, 0x00, 0x35, 0x00, 0x32, 0x00, 0x2f, 0x00, 0x2d, 0x00, 0x2a, 
0x00, 0x28, 0x00, 0x25, 0x00, 0x23, 0x00, 0x21, 0x00, 0xdd, 0x21, 0x3a, 0xc9, 0x2a, 0xd4, 0xc8, 
0x3e, 0x01, 0xcd, 0x8a, 0xca, 0x22, 0xd4, 0xc8, 0xdd, 0x21, 0x4e, 0xc9, 0x2a, 0xd6, 0xc8, 0x3e, 
0x02, 0xcd, 0x8a, 0xca, 0x22, 0xd6, 0xc8, 0xdd, 0x21, 0x62, 0xc9, 0x2a, 0xd8, 0xc8, 0x3e, 0x03, 
0xcd, 0x8a, 0xca, 0x22, 0xd8, 0xc8, 0x3a, 0x65, 0xc9, 0x07, 0x47, 0x3a, 0x51, 0xc9, 0xb0, 0x07, 
0x47, 0x3a, 0x3d, 0xc9, 0xb0, 0x16, 0x07, 0xcd, 0x75, 0xca, 0x16, 0x0d, 0x21, 0xcd, 0xc8, 0x7a, 
0x01, 0xfd, 0xff, 0xed, 0x79, 0x7e, 0x06, 0xbf, 0xed, 0x79, 0x2b, 0x15, 0xf2, 0x64, 0xca, 0xc9, 
0x01, 0xc0, 0xc8, 0x6a, 0x26, 0x00, 0x09, 0x77, 0xc9, 0xed, 0x73, 0xd2, 0xc8, 0x2a, 0xd2, 0xc8, 
0xed, 0x7b, 0xd0, 0xc8, 0xc9, 0xed, 0x73, 0xd0, 0xc8, 0xf9, 0x32, 0xcf, 0xc8, 0xdd, 0x35, 0x02, 
0xca, 0x99, 0xcb, 0xdd, 0x35, 0x06, 0x20, 0x36, 0xdd, 0x6e, 0x04, 0xdd, 0x66, 0x05, 0x7e, 0xfe, 
0x80, 0x20, 0x0c, 0x23, 0x5e, 0x23, 0x56, 0xdd, 0x73, 0x04, 0xdd, 0x72, 0x05, 0x18, 0xe9, 0xfe, 
0x1e, 0x38, 0x0c, 0xd6, 0x32, 0xdd, 0x77, 0x09, 0xdd, 0x36, 0x06, 0x01, 0x23, 0x18, 0x09, 0xdd, 
0x77, 0x09, 0x23, 0x7e, 0xdd, 0x77, 0x06, 0x23, 0xdd, 0x75, 0x04, 0xdd, 0x74, 0x05, 0xdd, 0x7e, 
0x07, 0xdd, 0xb6, 0x08, 0xca, 0x5c, 0xcb, 0xdd, 0xcb, 0x0e, 0x56, 0xc2, 0x5c, 0xcb, 0xdd, 0x6e, 
0x0c, 0xdd, 0x66, 0x0d, 0x7e, 0x23, 0xdd, 0x75, 0x0c, 0xdd, 0x74, 0x0d, 0xfe, 0x80, 0x20, 0x06, 
0x7e, 0x23, 0x66, 0x6f, 0x18, 0xee, 0xfe, 0x82, 0xc2, 0x07, 0xcb, 0xdd, 0xcb, 0x0e, 0xde, 0xc3, 
0xe9, 0xca, 0xfe, 0x83, 0xc2, 0x13, 0xcb, 0xdd, 0xcb, 0x0e, 0x9e, 0xc3, 0xe9, 0xca, 0xfe, 0x84, 
0xc2, 0x23, 0xcb, 0x3e, 0x09, 0xdd, 0xae, 0x03, 0xdd, 0x77, 0x03, 0xc3, 0xe9, 0xca, 0xdd, 0xcb, 
0x0e, 0x5e, 0xca, 0x45, 0xcb, 0xdd, 0x86, 0x12, 0xdd, 0x77, 0x12, 0x3d, 0x87, 0x5f, 0x16, 0x00, 
0x21, 0x76, 0xc9, 0x19, 0x7e, 0xdd, 0x77, 0x07, 0x23, 0x7e, 0xdd, 0x77, 0x08, 0xc3, 0x5c, 0xcb, 
0x5f, 0x16, 0x00, 0xdd, 0x6e, 0x07, 0xdd, 0x66, 0x08, 0xe6, 0x80, 0xca, 0x55, 0xcb, 0x16, 0xff, 
0x19, 0xdd, 0x75, 0x07, 0xdd, 0x74, 0x08, 0x3a, 0xce, 0xc8, 0x16, 0x06, 0xcd, 0x75, 0xca, 0xdd, 
0xcb, 0x0e, 0x96, 0x3a, 0xcf, 0xc8, 0xc6, 0x07, 0x57, 0xdd, 0x7e, 0x07, 0xdd, 0xb6, 0x08, 0x28, 
0x03, 0xdd, 0x7e, 0x09, 0xcd, 0x75, 0xca, 0x3a, 0xcf, 0xc8, 0x3d, 0x87, 0x57, 0xdd, 0x7e, 0x07, 
0xcd, 0x75, 0xca, 0x14, 0xdd, 0x7e, 0x08, 0xcd, 0x75, 0xca, 0xc3, 0x7e, 0xca, 0xdd, 0x75, 0x00, 
0xdd, 0x74, 0x01, 0xc9, 0xdd, 0x6e, 0x00, 0xdd, 0x66, 0x01, 0x7e, 0x23, 0xcd, 0x92, 0xcb, 0xcb, 
0x7f, 0xc2, 0x16, 0xcc, 0x22, 0xd2, 0xc8, 0xb7, 0x28, 0x1b, 0xdd, 0x86, 0x0f, 0xdd, 0x77, 0x12, 
0xdd, 0xcb, 0x0e, 0x9e, 0x3d, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x76, 0xc9, 0x19, 0x5e, 0x23, 0x56, 
0x2a, 0xd2, 0xc8, 0x18, 0x03, 0x11, 0x00, 0x00, 0x7e, 0x23, 0xcd, 0x92, 0xcb, 0xdd, 0x77, 0x02, 
0xdd, 0x73, 0x07, 0xdd, 0x72, 0x08, 0xdd, 0x7e, 0x10, 0xdd, 0x77, 0x0c, 0xdd, 0x7e, 0x11, 0xdd, 
0x77, 0x0d, 0xdd, 0xcb, 0x0e, 0xd6, 0xdd, 0xcb, 0x0e, 0x4e, 0xc2, 0x98, 0xca, 0xdd, 0xcb, 0x0e, 
0x46, 0xca, 0xfd, 0xcb, 0xdd, 0xcb, 0x0e, 0xce, 0xdd, 0x4e, 0x0a, 0xdd, 0x46, 0x0b, 0x0a, 0xdd, 
0x77, 0x09, 0x03, 0x0a, 0x03, 0xdd, 0x77, 0x06, 0xdd, 0x71, 0x04, 0xdd, 0x70, 0x05, 0xc3, 0x5c, 
0xcb, 0xe6, 0x7f, 0x22, 0xd2, 0xc8, 0x87, 0x5f, 0x16, 0x00, 0x21, 0x2c, 0xcc, 0x19, 0x7e, 0x23, 
0x66, 0x6f, 0xe5, 0x2a, 0xd2, 0xc8, 0xc9, 0x4a, 0xcc, 0x56, 0xcc, 0x64, 0xcc, 0x6e, 0xcc, 0x80, 
0xcc, 0x8b, 0xcc, 0xb8, 0xcc, 0x96, 0xcc, 0xa6, 0xcc, 0xb1, 0xcc, 0xc8, 0xcc, 0xd6, 0xcc, 0xe4, 
0xcc, 0xf1, 0xcc, 0x01, 0xcd, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0xc3, 0x99, 
0xcb, 0x7e, 0xdd, 0x77, 0x00, 0x23, 0x7e, 0xdd, 0x77, 0x01, 0x23, 0xe5, 0xc3, 0x99, 0xcb, 0x46, 
0xc5, 0x23, 0xe5, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 0xcb, 0xd1, 0xc1, 0x10, 0x03, 0xc3, 0x99, 0xcb, 
0xc5, 0xd5, 0xdd, 0x73, 0x00, 0xdd, 0x72, 0x01, 0xc3, 0x99, 0xcb, 0x7e, 0x23, 0x32, 0xce, 0xc8, 
0xcd, 0x92, 0xcb, 0xc3, 0x99, 0xcb, 0x7e, 0x23, 0xcd, 0x92, 0xcb, 0xdd, 0x77, 0x03, 0xc3, 0x99, 
0xcb, 0x7e, 0xdd, 0x77, 0x0a, 0x23, 0x7e, 0xdd, 0x77, 0x0b, 0x23, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 
0xcb, 0x7e, 0x23, 0xcd, 0x92, 0xcb, 0xdd, 0x77, 0x0f, 0xc3, 0x99, 0xcb, 0xe1, 0xcd, 0x92, 0xcb, 
0xc3, 0x99, 0xcb, 0x7e, 0xdd, 0x77, 0x10, 0x23, 0x7e, 0xdd, 0x77, 0x11, 0x23, 0xcd, 0x92, 0xcb, 
0xc3, 0x99, 0xcb, 0xdd, 0xcb, 0x0e, 0xc6, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 
0xcb, 0xdd, 0xcb, 0x0e, 0x86, 0xdd, 0xcb, 0x0e, 0x8e, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 0xcb, 0x5e, 
0x23, 0x56, 0x23, 0xcd, 0x92, 0xcb, 0x01, 0x99, 0xcb, 0xc5, 0xd5, 0xc9, 0x3a, 0xce, 0xc8, 0x86, 
0xe6, 0x1f, 0x32, 0xce, 0xc8, 0x23, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 0xcb, 0x7e, 0xdd, 0x86, 0x0f, 
0xdd, 0x77, 0x0f, 0x23, 0xcd, 0x92, 0xcb, 0xc3, 0x99, 0xcb, 0x15, 0xcd, 0x66, 0xd0, 0xca, 0xd0, 
0x82, 0x02, 0x86, 0x5b, 0xce, 0x87, 0x61, 0xce, 0x50, 0x80, 0x50, 0x80, 0x81, 0xf4, 0xcf, 0x81, 
0xf4, 0xcf, 0x81, 0xa8, 0xcf, 0x81, 0xa8, 0xcf, 0x81, 0x3b, 0xcf, 0x81, 0x3b, 0xcf, 0x81, 0xe6, 
0xce, 0x81, 0xe6, 0xce, 0x81, 0x65, 0xce, 0x81, 0x65, 0xce, 0x83, 0x86, 0x5b, 0xce, 0x87, 0x61, 
0xce, 0x50, 0x80, 0x50, 0x70, 0x81, 0x60, 0xcd, 0x86, 0x58, 0xcd, 0x81, 0x66, 0xcd, 0x00, 0x10, 
0x80, 0x15, 0xcd, 0x82, 0x0c, 0x00, 0xf4, 0x00, 0x80, 0x58, 0xcd, 0x86, 0x55, 0xd0, 0x87, 0x5e, 
0xd0, 0x2f, 0x10, 0x34, 0x18, 0x33, 0x08, 0x36, 0x08, 0x34, 0x08, 0x2f, 0x08, 0x2c, 0x08, 0x31, 
0x20, 0x2d, 0x18, 0x31, 0x08, 0x36, 0x18, 0x34, 0x08, 0x33, 0x08, 0x31, 0x08, 0x2f, 0x08, 0x2d, 
0x08, 0x2c, 0x30, 0x2f, 0x10, 0x34, 0x18, 0x33, 0x08, 0x36, 0x08, 0x34, 0x08, 0x2f, 0x08, 0x2c, 
0x08, 0x31, 0x20, 0x2d, 0x08, 0x31, 0x08, 0x36, 0x08, 0x34, 0x08, 0x33, 0x10, 0x36, 0x10, 0x39, 
0x10, 0x33, 0x10, 0x34, 0x30, 0x38, 0x08, 0x36, 0x08, 0x33, 0x18, 0x33, 0x08, 0x31, 0x08, 0x33, 
0x08, 0x34, 0x08, 0x31, 0x08, 0x33, 0x20, 0x2f, 0x08, 0x2f, 0x08, 0x2e, 0x08, 0x2f, 0x08, 0x31, 
0x18, 0x31, 0x08, 0x36, 0x10, 0x34, 0x10, 0x33, 0x30, 0x36, 0x10, 0x36, 0x18, 0x33, 0x08, 0x2f, 
0x08, 0x2f, 0x08, 0x2e, 0x08, 0x2f, 0x08, 0x38, 0x20, 0x34, 0x08, 0x31, 0x08, 0x33, 0x08, 0x34, 
0x08, 0x33, 0x10, 0x36, 0x10, 0x34, 0x10, 0x31, 0x10, 0x2f, 0x30, 0x38, 0x08, 0x36, 0x08, 0x34, 
0x20, 0x2f, 0x18, 0x2c, 0x08, 0x31, 0x20, 0x2d, 0x10, 0x36, 0x08, 0x34, 0x08, 0x33, 0x20, 0x31, 
0x10, 0x2f, 0x10, 0x2f, 0x30, 0x2f, 0x10, 0x38, 0x20, 0x36, 0x10, 0x2f, 0x08, 0x2f, 0x08, 0x34, 
0x20, 0x33, 0x18, 0x33, 0x08, 0x31, 0x18, 0x30, 0x08, 0x31, 0x10, 0x36, 0x10, 0x36, 0x30, 0x38, 
0x08, 0x36, 0x08, 0x34, 0x20, 0x2f, 0x18, 0x2c, 0x08, 0x31, 0x20, 0x2d, 0x10, 0x36, 0x08, 0x34, 
0x08, 0x33, 0x20, 0x31, 0x10, 0x2f, 0x10, 0x38, 0x30, 0x38, 0x10, 0x3b, 0x20, 0x39, 0x10, 0x38, 
0x08, 0x38, 0x08, 0x36, 0x18, 0x38, 0x08, 0x39, 0x18, 0x39, 0x08, 0x38, 0x18, 0x38, 0x08, 0x36, 
0x18, 0x36, 0x08, 0x34, 0x30, 0x89, 0x82, 0x03, 0xfc, 0x80, 0x5b, 0xce, 0x0d, 0xde, 0x0d, 0xde, 
0x86, 0xee, 0xcf, 0x87, 0xe7, 0xcf, 0x3d, 0x08, 0x3e, 0x08, 0x3f, 0x08, 0x40, 0x08, 0x42, 0x08, 
0x40, 0x08, 0x3e, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x3d, 0x08, 0x3e, 0x08, 0x3d, 0x08, 0x40, 0x08, 
0x3e, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x3d, 0x08, 0x3e, 0x08, 0x3f, 0x08, 0x40, 0x08, 0x42, 0x08, 
0x40, 0x08, 0x3e, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x3d, 0x08, 0x3e, 0x08, 0x3d, 0x08, 0x40, 0x08, 
0x3e, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x36, 0x08, 0x38, 0x08, 0x39, 0x08, 0x38, 0x08, 0x3b, 0x08, 
0x39, 0x08, 0x38, 0x08, 0x36, 0x08, 0x38, 0x08, 0x39, 0x08, 0x3a, 0x08, 0x3b, 0x08, 0x3d, 0x08, 
0x3b, 0x08, 0x39, 0x08, 0x38, 0x08, 0x36, 0x08, 0x38, 0x08, 0x39, 0x08, 0x38, 0x08, 0x3b, 0x08, 
0x39, 0x08, 0x38, 0x08, 0x36, 0x08, 0x38, 0x08, 0x39, 0x08, 0x3b, 0x08, 0x38, 0x08, 0x34, 0x20, 
0x89, 0x39, 0x17, 0x3b, 0x08, 0x3d, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x39, 0x08, 0x38, 0x10, 0x39, 
0x10, 0x3b, 0x10, 0x34, 0x18, 0x39, 0x10, 0x3b, 0x08, 0x3d, 0x08, 0x3d, 0x08, 0x3b, 0x08, 0x39, 
0x08, 0x38, 0x10, 0x39, 0x10, 0x3b, 0x10, 0x34, 0x18, 0x36, 0x10, 0x38, 0x08, 0x39, 0x08, 0x39, 
0x08, 0x38, 0x08, 0x36, 0x08, 0x34, 0x10, 0x38, 0x10, 0x3b, 0x10, 0x39, 0x08, 0x38, 0x10, 0x36, 
0x10, 0x38, 0x08, 0x39, 0x08, 0x39, 0x08, 0x38, 0x08, 0x36, 0x08, 0x34, 0x10, 0x38, 0x10, 0x3b, 
0x10, 0x39, 0x08, 0x38, 0x09, 0x89, 0x86, 0x55, 0xd0, 0x87, 0x5e, 0xd0, 0x00, 0x07, 0x38, 0x10, 
0x36, 0x08, 0x34, 0x10, 0x34, 0x10, 0x34, 0x04, 0x36, 0x04, 0x34, 0x04, 0x33, 0x04, 0x34, 0x08, 
0x36, 0x08, 0x38, 0x10, 0x38, 0x10, 0x00, 0x08, 0x3b, 0x10, 0x39, 0x08, 0x38, 0x10, 0x38, 0x10, 
0x38, 0x04, 0x39, 0x04, 0x38, 0x04, 0x36, 0x04, 0x38, 0x08, 0x39, 0x08, 0x3b, 0x10, 0x3b, 0x10, 
0x00, 0x08, 0x39, 0x10, 0x39, 0x08, 0x39, 0x10, 0x3d, 0x08, 0x3b, 0x04, 0x39, 0x04, 0x38, 0x10, 
0x38, 0x10, 0x38, 0x10, 0x34, 0x10, 0x00, 0x08, 0x33, 0x10, 0x33, 0x08, 0x33, 0x10, 0x36, 0x08, 
0x34, 0x04, 0x33, 0x04, 0x34, 0x08, 0x31, 0x08, 0x31, 0x04, 0x33, 0x04, 0x31, 0x04, 0x30, 0x04, 
0x31, 0x21, 0x89, 0x86, 0xee, 0xcf, 0x87, 0xe7, 0xcf, 0x36, 0x10, 0x33, 0x08, 0x34, 0x08, 0x36, 
0x10, 0x33, 0x08, 0x34, 0x08, 0x36, 0x04, 0x38, 0x04, 0x36, 0x04, 0x34, 0x04, 0x33, 0x08, 0x34, 
0x08, 0x31, 0x10, 0x39, 0x08, 0x38, 0x08, 0x36, 0x10, 0x33, 0x08, 0x34, 0x08, 0x36, 0x10, 0x33, 
0x08, 0x34, 0x08, 0x38, 0x04, 0x39, 0x04, 0x38, 0x04, 0x36, 0x04, 0x38, 0x08, 0x3c, 0x08, 0x3d, 
0x20, 0x89, 0x0e, 0x01, 0x3f, 0x3e, 0x3d, 0x0a, 0x00, 0x82, 0x0c, 0xf4, 0x80, 0xee, 0xcf, 0x86, 
0x55, 0xd0, 0x87, 0x5e, 0xd0, 0x31, 0x17, 0x33, 0x08, 0x34, 0x18, 0x31, 0x04, 0x33, 0x04, 0x34, 
0x08, 0x34, 0x08, 0x33, 0x08, 0x31, 0x08, 0x33, 0x10, 0x2c, 0x10, 0x00, 0x08, 0x33, 0x10, 0x34, 
0x08, 0x36, 0x18, 0x33, 0x04, 0x34, 0x04, 0x36, 0x08, 0x36, 0x08, 0x34, 0x08, 0x33, 0x08, 0x31, 
0x20, 0x38, 0x10, 0x3d, 0x10, 0x3b, 0x08, 0x3d, 0x10, 0x3b, 0x08, 0x39, 0x08, 0x39, 0x08, 0x38, 
0x08, 0x36, 0x08, 0x38, 0x10, 0x31, 0x10, 0x00, 0x08, 0x39, 0x10, 0x36, 0x08, 0x38, 0x18, 0x33, 
0x04, 0x34, 0x04, 0x36, 0x08, 0x36, 0x08, 0x34, 0x08, 0x33, 0x08, 0x31, 0x10, 0x00, 0x11, 0x89, 
0xfe, 0xfe, 0x02, 0x02, 0x03, 0xfd, 0x80, 0x55, 0xd0, 0x00, 0x01, 0x0f, 0x01, 0x40, 0x3f, 0x0c, 
0x00, 0x87, 0x7d, 0xd0, 0x86, 0x8c, 0xd0, 0x28, 0x10, 0x84, 0x0d, 0x81, 0xa8, 0xd0, 0x25, 0x10, 
0x84, 0x07, 0x81, 0xa8, 0xd0, 0x80, 0x66, 0xd0, 0x0f, 0x03, 0x0e, 0x02, 0x0d, 0x02, 0x0c, 0x02, 
0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x00, 0x00, 0x1d, 0x80, 0x8c, 0xd0, 0x85, 0x01, 0x8a, 0x87, 0xbc, 
0xd0, 0x82, 0x04, 0x84, 0x1a, 0x07, 0x01, 0x84, 0x00, 0x07, 0x01, 0x83, 0x8b, 0x85, 0x08, 0x87, 
0x5e, 0xd0, 0x89, 0x85, 0x01, 0x8a, 0x87, 0xbc, 0xd0, 0x82, 0x10, 0x39, 0x01, 0x8d, 0x10, 0x83, 
0x8b, 0x85, 0x08, 0x87, 0x7d, 0xd0, 0x89, 0x0f, 0x01, 0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 
0x39, 0x38, 0x37, 0x00, 0x00, 0x82, 0x02, 0x86, 0x7a, 0xd1, 0x87, 0x6f, 0xd1, 0x0d, 0x00, 0x81, 
0x5c, 0xd1, 0x81, 0x5c, 0xd1, 0x82, 0x04, 0x14, 0x60, 0x0d, 0x20, 0x83, 0x81, 0x4f, 0xd1, 0x81, 
0x4f, 0xd1, 0x82, 0x04, 0x81, 0x3e, 0xd1, 0x83, 0x83, 0x10, 0x00, 0x81, 0xf9, 0xd0, 0x81, 0xf9, 
0xd0, 0x80, 0xca, 0xd0, 0x10, 0x40, 0x15, 0x40, 0x17, 0x40, 0x10, 0x80, 0x15, 0x40, 0x17, 0x40, 
0x10, 0x40, 0x17, 0x20, 0x12, 0x20, 0x17, 0x40, 0x12, 0x40, 0x0f, 0x40, 0x17, 0x40, 0x10, 0x40, 
0x17, 0x20, 0x12, 0x20, 0x17, 0x40, 0x10, 0x40, 0x15, 0x40, 0x17, 0x40, 0x10, 0x60, 0x17, 0x20, 
0x0d, 0x20, 0x14, 0x20, 0x15, 0x40, 0x17, 0x40, 0x10, 0x40, 0x15, 0x40, 0x17, 0x40, 0x10, 0x80, 
0x12, 0x40, 0x10, 0x20, 0x17, 0x20, 0x10, 0x40, 0x89, 0x15, 0x40, 0x10, 0x40, 0x15, 0x40, 0x10, 
0x40, 0x17, 0x40, 0x10, 0x40, 0x17, 0x40, 0x10, 0x40, 0x89, 0x0d, 0x80, 0x10, 0x80, 0x12, 0x40, 
0x0d, 0x40, 0x14, 0x40, 0x0d, 0x40, 0x89, 0x0d, 0x60, 0x14, 0x80, 0x0d, 0x60, 0x12, 0x20, 0x0d, 
0x20, 0x12, 0x20, 0x0d, 0x20, 0x14, 0x20, 0x0d, 0x20, 0x89, 0x0f, 0x02, 0x0e, 0x02, 0x3f, 0x3e, 
0x0b, 0x02, 0x80, 0x6f, 0xd1, 0x09, 0x04, 0xfc, 0xf7, 0xf7, 0xfc, 0x04, 0x82, 0x0c, 0x83, 0x04, 
0x02, 0xfe, 0xfc, 0xfc, 0xfe, 0x02, 0x82, 0xfb, 0x83, 0x06, 0x03, 0xfd, 0xfa, 0xfa, 0xfd, 0x03, 
0x82, 0x05, 0x83, 0x04, 0x02, 0xfe, 0xfc, 0xfc, 0xfe, 0x02, 0x82, 0xf4, 0x83, 0x80, 0x7a, 0xd1, 

};

struct RAMItem
{
  uint16 addr;
  uint8 val;
};

RAMItem ram[256];
uint8 ramsize;

void setup()
{
  set_ym_clock();
  set_bus_ctl();

  // reset registers
  //for (int i=0; i<16; i++) {
  //  send_data(i, 0);
  //}
//  Serial.begin(9600);
}

uint8 peek(uint16 addr)
{
    uint8 res = 0;
    if (addr >= ROM_ADDR && addr < ROM_ADDR + sizeof(rom))
    {
      res = pgm_read_byte(rom + addr - ROM_ADDR);
    }
    for (int i = 0 ; i < ramsize ; ++i)
      if (ram[i].addr == addr)
      {
        res = ram[i].val;
        break;
      }
//    Serial.print(addr, HEX);
//    Serial.print(" ");
//    Serial.println(res, HEX);
    return res;
}

void poke(uint16 addr, uint8 c)
{
//    Serial.print(addr, HEX);
//    Serial.print(" ");
//    Serial.println(c, HEX);
  for (int i = 0 ; i < ramsize ; ++i)
    if (ram[i].addr == addr)
    {
      ram[i].val = c;
      return;
    }
  ram[ramsize].addr = addr;
  ram[ramsize].val = c;
  ++ramsize;
}

void handle_output(uint a, uint b)
{
    /*
OUT (0xfffd)   - Select a register 0-14
IN  (0xfffd)   - Read the value of the selected register
OUT (0xbffd)   - Write to the selected register
    */
    static uint8 reg;
    if (a == 0xfffd)
      reg = b;
    else if (a == 0xbffd)
      send_data(reg, b);
}

uint handle_input(uint a)
{
  uint8 b = 0xff;
//    printf("IN %x\n", a);
  return b;
}

/*
void emulate()
{
  Z80 z80;
  z80.registers.pc = 0;
  z80.registers.sp = 0;

  for(;;) {
    if (z80.halt)
    {
      z80.halt = 0;
      ++z80.registers.pc;
    }
    //_delay_ms(20.);
    z80.run(1000000);
  }
}
*/
Z80 z80;

union Channel
{
  uint8 nn[0x14];
  struct
  {
    uint8 f0;
    uint8 f1;
    uint8 f2;
    uint8 f3;
    uint8 f4;
    uint8 f5;
    uint8 f6;
    uint8 f7;
    uint8 f8;
    uint8 f9;
    uint8 fa;
    uint8 fb;
    uint8 fc;
    uint8 fd;
    uint8 fe;
    uint8 ff;
    uint8 f10;
    uint8 f11;
    uint8 f12;
    uint8 f13;
  };
};

static uint8 ayregs[16];
static uint8 ch;
static Channel channels[3] = {
  { .nn = {0x73, 0, 0xDD, 0x72, 0x01, 0xC3, 0x5B, 0xC8, 0x7E, 0x23, 0x32, 0x90, 0xC5, 0xCD, 0x54, 0xC8, 0xC3, 0x5B, 0xC8, 0x7E} },
  { .nn = {0x23, 0xCD, 0x54, 0xC8, 0xdd, 0x77, 0x3, 0xC3, 0x5B, 0xC8, 0x7E, 0xDD, 0x77, 0xA, 0x23, 0x7E, 0xDD, 0x77, 0xB, 0x23} },
  { .nn = {0xCD, 0x54, 0xC8, 0xC3, 0x5b, 0xC8, 0x7E, 0x23, 0xCD, 0x54, 0xC8, 0xDD, 0x77, 0xF, 0xC3, 0x5B, 0xC8, 0xE1, 0xCD, 0x54} }
};
static uint16 spNew;
static uint16 spSaved;
static uint8 A;

void z80_init()
{
  z80.registers.pc = ROM_ADDR;
  z80.registers.sp = 0;
//ROM:C85F                 ld      hl, (word_CD0F)
//ROM:C862                 ld      (byte_C93A), hl
  poke2(0xc93a, peek2(0xcd0f));
//ROM:C865                 ld      hl, (word_CD11)
//ROM:C868                 ld      (byte_C93A+14h), hl
  poke2(0xc93a + 0x14, peek2(0xcd11));
//ROM:C86B                 ld      hl, (word_CD13)
//ROM:C86E                 ld      (unk_C962), hl
  poke2(0xc962, peek2(0xcd13));
//ROM:C871                 ld      a, 1
//ROM:C873                 ld      (byte_C93A+2), a
  poke(0xc93a + 2, 1);
//ROM:C876                 ld      (byte_C93A+16h), a
  poke(0xc93a + 0x16, 1);
//ROM:C879                 ld      (unk_C964), a
  poke(0xc964, 1);
//ROM:C87C                 ld      a, 8
//ROM:C87E                 ld      (byte_C93A+3), a
  poke(0xc93a + 3, 8);
//ROM:C881                 ld      (byte_C93A+17h), a
  poke(0xc93a + 0x17, 8);
//ROM:C884                 ld      (unk_C965), a
  poke(0xc965, 8);
//ROM:C887                 ld      hl, byte_C8FA
//ROM:C88A                 ld      de, 20h ; ' '
//ROM:C88D                 ld      (stack1), hl
  poke2(0xC8D4, 0xc8fa);
//ROM:C890                 add     hl, de
//ROM:C891                 ld      (stack2), hl
  poke2(0xC8D6, 0xc8fa + 0x20);
//ROM:C894                 add     hl, de
//ROM:C895                 ld      (stack3), hl
  poke2(0xC8D8, 0xc8fa + 0x40);
//ROM:C898                 ld      hl, 0
//ROM:C89B                 ld      (byte_C93A+0Eh), hl
  poke2(0xc93a + 0xe, 0);
//ROM:C89E                 ld      (unk_C95C), hl
  poke2(0xc95c, 0);
//ROM:C8A1                 ld      (unk_C970), hl
  poke2(0xc970, 0);
//ROM:C8A4                 ld      (byte_C93A+10h), hl
  poke2(0xc93a + 0x10, 0);
//ROM:C8A7                 ld      (unk_C95E), hl
  poke2(0xc95e, 0);
//ROM:C8AA                 ld      (unk_C972), hl
  poke2(0xc972, 0);
//ROM:C8AD                 xor     a
//ROM:C8AE                 ld      (byte_C8CE), a
  poke(0xc8ce, 0);
}

void z80_write_ay_reg(uint8 reg, uint8 val)
{
  ayregs[reg] = val;
}

void z80_sub_ca8a(int a)
{
  z80.registers.sp -= 2;
//ROM:CA8A                 ld      (spSaved), sp
  spSaved = z80.registers.sp;
//ROM:CA8E                 ld      sp, hl
  z80.registers.sp = z80.registers.hl;
//ROM:CA8F                 ld      (byte_C8CF), a
  ch = a;
//ROM:CA92                 dec     (ix+2)
  poke(z80.registers.ix + 2, peek(z80.registers.ix + 2) - 1);
//ROM:CA95                 jp      z, loc_CB99
  if (!peek(z80.registers.ix + 2))
  {
loc_CB99:
//ROM:CB99                 ld      l, (ix+0)
//ROM:CB9C                 ld      h, (ix+1)
    z80.registers.hl = peek2(z80.registers.ix);
//ROM:CB9F                 ld      a, (hl)
    A = peek(z80.registers.hl);
//ROM:CBA0                 inc     hl
    ++z80.registers.hl;
//ROM:CBA1                 call    PutHLInfoIXPtr
    poke2(z80.registers.ix, z80.registers.hl);
//ROM:CBA4                 bit     7, a
//ROM:CBA6                 jp      nz, loc_CC16
    if (A & 0x80)
    {
//ROM:CC16                 and     7Fh ; ''
      A &= 0x7f;
//ROM:CC18                 ld      (spNew), hl
      spNew = z80.registers.hl;
//ROM:CC1B                 add     a, a
//ROM:CC1C                 ld      e, a
//ROM:CC1D                 ld      d, 0
//ROM:CC1F                 ld      hl, unk_CC2C
//ROM:CC22                 add     hl, de
//ROM:CC23                 ld      a, (hl)
//ROM:CC24                 inc     hl
//ROM:CC25                 ld      h, (hl)
//ROM:CC26                 ld      l, a
//ROM:CC27                 push    hl
//ROM:CC28                 ld      hl, (spNew)
//ROM:CC2B                 ret
      z80.registers.hl = spNew;
      // 2, 9, 6, 4, 1, 5, 10, 
      switch (A)
      {
      case 0:
//ROM:CC4A                 ld      a, (hl)
//ROM:CC4B                 ld      (ix+0), a
//ROM:CC4E                 inc     hl
//ROM:CC4F                 ld      a, (hl)
//ROM:CC50                 ld      (ix+1), a
        poke2(z80.registers.ix, peek2(z80.registers.hl));
        ++z80.registers.hl;
//ROM:CC53                 jp      loc_CB99
        goto loc_CB99;
      case 1:
//ROM:CC56                 ld      a, (hl)
//ROM:CC57                 ld      (ix+0), a
//ROM:CC5A                 inc     hl
//ROM:CC5B                 ld      a, (hl)
//ROM:CC5C                 ld      (ix+1), a
        poke2(z80.registers.ix, peek2(z80.registers.hl));
//ROM:CC5F                 inc     hl
        z80.registers.hl += 2;
//ROM:CC60                 push    hl
        z80.registers.sp -= 2;
        poke2(z80.registers.sp, z80.registers.hl);
//ROM:CC61                 jp      loc_CB99
        goto loc_CB99;
      case 2:
//ROM:CC64                 ld      b, (hl)
        z80.registers.b = peek(z80.registers.hl);
//ROM:CC65                 push    bc
        z80.registers.sp -= 2;
        poke2(z80.registers.sp, z80.registers.bc);
//ROM:CC66                 inc     hl
        ++z80.registers.hl;
//ROM:CC67                 push    hl
        z80.registers.sp -= 2;
        poke2(z80.registers.sp, z80.registers.hl);
//ROM:CC68                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CC6B                 jp      loc_CB99
        goto loc_CB99;
      case 3:
//ROM:CC6E                 pop     de
        z80.registers.de = peek2(z80.registers.sp);
        z80.registers.sp += 2;
//ROM:CC6F                 pop     bc
        z80.registers.bc = peek2(z80.registers.sp);
        z80.registers.sp += 2;
//ROM:CC70                 djnz    loc_CC75
        if (--z80.registers.b)
          goto loc_CC75;
//ROM:CC72                 jp      loc_CB99
        goto loc_CB99;
loc_CC75:
//ROM:CC75                 push    bc
        z80.registers.sp -= 2;
        poke2(z80.registers.sp, z80.registers.bc);
//ROM:CC76                 push    de
        z80.registers.sp -= 2;
        poke2(z80.registers.sp, z80.registers.de);
//ROM:CC77                 ld      (ix+0), e
//ROM:CC7A                 ld      (ix+1), d
        poke2(z80.registers.ix, z80.registers.de);
//ROM:CC7D                 jp      loc_CB99
        goto loc_CB99;
      case 4:
//ROM:CC80                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CC81                 inc     hl
        ++z80.registers.hl;
//ROM:CC82                 ld      (byte_C8CE), a
        poke(0xc8ce, A);
//ROM:CC85                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CC88                 jp      loc_CB99
        goto loc_CB99;
      case 5:
//ROM:CC8B                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CC8C                 inc     hl
        ++z80.registers.hl;
//ROM:CC8D                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CC90                 ld      (ix+3), a
        poke(z80.registers.ix + 3, A);
//ROM:CC93                 jp      loc_CB99
        goto loc_CB99;
      case 6:
//ROM:CC96                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CC97                 ld      (ix+0Ah), a
        poke(z80.registers.ix + 0xa, A);
//ROM:CC9A                 inc     hl
        ++z80.registers.hl;
//ROM:CC9B                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CC9C                 ld      (ix+0Bh), a
        poke(z80.registers.ix + 0xb, A);
//ROM:CC9F                 inc     hl
        ++z80.registers.hl;
//ROM:CCA0                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCA3                 jp      loc_CB99
        goto loc_CB99;
      case 7:
//ROM:CCA6                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CCA7                 inc     hl
        ++z80.registers.hl;
//ROM:CCA8                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCAB                 ld      (ix+0Fh), a
        poke(z80.registers.ix + 0xf, A);
//ROM:CCAE                 jp      loc_CB99
        goto loc_CB99;
      case 8:
//ROM:CCB1                 pop     hl
        z80.registers.hl = peek2(z80.registers.sp);
        z80.registers.sp += 2;
//ROM:CCB2                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCB5                 jp      loc_CB99
        goto loc_CB99;
      case 9:
//ROM:CCB8                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CCB9                 ld      (ix+10h), a
        poke(z80.registers.ix + 0x10, A);
//ROM:CCBC                 inc     hl
        ++z80.registers.hl;
//ROM:CCBD                 ld      a, (hl)
        A = peek(z80.registers.hl);
//ROM:CCBE                 ld      (ix+11h), a
        poke(z80.registers.ix + 0x11, A);
//ROM:CCC1                 inc     hl
        ++z80.registers.hl;
//ROM:CCC2                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCC5                 jp      loc_CB99
        goto loc_CB99;
      case 10:
//ROM:CCC8                 set     0, (ix+0Eh)
//ROM:CCCC                 res     1, (ix+0Eh)
        poke(z80.registers.ix + 0xe, (peek(z80.registers.ix + 0xe) & ~2) | 1);
//ROM:CCD0                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCD3                 jp      loc_CB99
        goto loc_CB99;
      case 11:
//ROM:CCD6                 res     0, (ix+0Eh)
//ROM:CCDA                 res     1, (ix+0Eh)
        poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) & ~3);
//ROM:CCDE                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCE1                 jp      loc_CB99
        goto loc_CB99;
      case 12:
//ROM:CCE4                 ld      e, (hl)
//ROM:CCE5                 inc     hl
//ROM:CCE6                 ld      d, (hl)
//ROM:CCE7                 inc     hl
        z80.registers.de = peek2(z80.registers.hl);
        z80.registers.hl += 2;
//ROM:CCE8                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCEB                 ld      bc, loc_CB99
//ROM:CCEE                 push    bc
//ROM:CCEF                 push    de
//ROM:CCF0                 ret
        // TODO
        goto loc_CB99;
      case 13:
//ROM:CCF1                 ld      a, (byte_C8CE)
//ROM:CCF4                 add     a, (hl)
//ROM:CCF5                 and     1Fh
        A = (peek(0xc8ce) + peek(z80.registers.hl)) & 0x1f;
//ROM:CCF7                 ld      (byte_C8CE), a
        poke(0xc8ce, A);
//ROM:CCFA                 inc     hl
        ++z80.registers.hl;
//ROM:CCFB                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CCFE                 jp      loc_CB99
        goto loc_CB99;
      case 14:
//ROM:CD01                 ld      a, (hl)
//ROM:CD02                 add     a, (ix+0Fh)
        A = peek(z80.registers.ix + 0xf) + peek(z80.registers.hl);
//ROM:CD05                 ld      (ix+0Fh), a
        poke(z80.registers.ix + 0xf, A);
//ROM:CD08                 inc     hl
        ++z80.registers.hl;
//ROM:CD09                 call    PutHLInfoIXPtr
        poke2(z80.registers.ix, z80.registers.hl);
//ROM:CD0C                 jp      loc_CB99
        goto loc_CB99;
      }
    }
//ROM:CBA9                 ld      (spNew), hl
    spNew = z80.registers.hl;
//ROM:CBAC                 or      a
//ROM:CBAD                 jr      z, loc_CBCA
    if (A)
    {
//ROM:CBAF                 add     a, (ix+0Fh)
      A += peek(z80.registers.ix + 0xf);
//ROM:CBB2                 ld      (ix+12h), a
      poke(z80.registers.ix + 0x12, A);
//ROM:CBB5                 res     3, (ix+0Eh)
      poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) & ~8);
//ROM:CBB9                 dec     a
//ROM:CBBA                 add     a, a
//ROM:CBBB                 ld      e, a
//ROM:CBBC                 ld      d, 0
//ROM:CBBE                 ld      hl, 0C976h
//ROM:CBC1                 add     hl, de
//ROM:CBC2                 ld      e, (hl)
//ROM:CBC3                 inc     hl
//ROM:CBC4                 ld      d, (hl)
      z80.registers.de = peek2(0xc976 + 2 * (A - 1));
//ROM:CBC5                 ld      hl, (spNew)
      z80.registers.hl = spNew;
//ROM:CBC8                 jr      loc_CBCD
    }
    else
    {
//ROM:CBCA loc_CBCA:                               ; CODE XREF: PlayChannel+123j
//ROM:CBCA                 ld      de, 0
      z80.registers.de = 0;
    }
//ROM:CBCD loc_CBCD:                               ; CODE XREF: PlayChannel+13Ej
//ROM:CBCD                 ld      a, (hl)
    A = peek(z80.registers.hl);
//ROM:CBCE                 inc     hl
    ++z80.registers.hl;
//ROM:CBCF                 call    PutHLInfoIXPtr
    poke2(z80.registers.ix, z80.registers.hl);
//ROM:CBD2                 ld      (ix+2), a
    poke(z80.registers.ix + 2, A);
//ROM:CBD5                 ld      (ix+7), e
//ROM:CBD8                 ld      (ix+8), d
    poke2(z80.registers.ix + 7, z80.registers.de);
//ROM:CBDB                 ld      a, (ix+10h)
//ROM:CBDE                 ld      (ix+0Ch), a
    poke(z80.registers.ix + 0xc, peek(z80.registers.ix + 0x10));
//ROM:CBE1                 ld      a, (ix+11h)
//ROM:CBE4                 ld      (ix+0Dh), a
    poke(z80.registers.ix + 0xd, peek(z80.registers.ix + 0x11));
//ROM:CBE7                 set     2, (ix+0Eh)
    poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) | 4);
//ROM:CBEB                 bit     1, (ix+0Eh)
//ROM:CBEF                 jp      nz, loc_CA98
    if (!(peek(z80.registers.ix + 0xe) & 2))
    {
//ROM:CBF2                 bit     0, (ix+0Eh)
//ROM:CBF6                 jp      z, loc_CBFD
//ROM:CBF9                 set     1, (ix+0Eh)
      if (peek(z80.registers.ix + 0xe) & 1)
      {
        poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) | 2);
      }
//ROM:CBFD                 ld      c, (ix+0Ah)
//ROM:CC00                 ld      b, (ix+0Bh)
      z80.registers.bc = peek2(z80.registers.ix + 0xa);
//ROM:CC03                 ld      a, (bc)
      A = peek(z80.registers.bc);
//ROM:CC04                 ld      (ix+9), a
      poke(z80.registers.ix + 9, A);
//ROM:CC07                 inc     bc
      ++z80.registers.bc;
//ROM:CC08                 ld      a, (bc)
      A = peek(z80.registers.bc);
//ROM:CC09                 inc     bc
      ++z80.registers.bc;
//ROM:CC0A                 ld      (ix+6), a
      poke(z80.registers.ix + 6, A);
//ROM:CC0D                 ld      (ix+4), c
//ROM:CC10                 ld      (ix+5), b
      poke2(z80.registers.ix + 4, z80.registers.bc);
//ROM:CC13                 jp      loc_CB5C
      goto loc_CB5C;
    }
  }
//ROM:CA98 loc_CA98:                               ; CODE XREF: PlayChannel+165j
loc_CA98:
//ROM:CA98                 dec     (ix+6)
  poke(z80.registers.ix + 6, peek(z80.registers.ix + 6) - 1);
//ROM:CA9B                 jr      nz, loc_CAD3
  if (peek(z80.registers.ix + 6))
    goto loc_CAD3;
//ROM:CA9D
//ROM:CA9D loc_CA9D:                               ; CODE XREF: PlayChannel+28j
loc_CA9D:
//ROM:CA9D                 ld      l, (ix+4)
//ROM:CAA0                 ld      h, (ix+5)
  z80.registers.hl = peek2(z80.registers.ix + 4);
//ROM:CAA3                 ld      a, (hl)
  A = peek(z80.registers.hl);
//ROM:CAA4                 cp      80h ; 'À'
  if (A != 0x80)
  {
//ROM:CAB4                 cp      1Eh
//ROM:CAB6                 jr      c, loc_CAC4
    if (A < 0x1e)
    {
//ROM:CAC4 loc_CAC4:                               ; CODE XREF: PlayChannel+2Cj
//ROM:CAC4                 ld      (ix+9), a
      poke(z80.registers.ix + 9, A);
//ROM:CAC7                 inc     hl
      ++z80.registers.hl;
//ROM:CAC8                 ld      a, (hl)
      A = peek(z80.registers.hl);
//ROM:CAC9                 ld      (ix+6), a
      poke(z80.registers.ix + 6, A);
//ROM:CACC                 inc     hl
      ++z80.registers.hl;
//ROM:CACD
//ROM:CACD loc_CACD:                               ; CODE XREF: PlayChannel+38j
loc_CACD:
//ROM:CACD                 ld      (ix+4), l
//ROM:CAD0                 ld      (ix+5), h
      poke2(z80.registers.ix + 4, z80.registers.hl);
//ROM:CAD3
//ROM:CAD3 loc_CAD3:                               ; CODE XREF: PlayChannel+11j
loc_CAD3:
//ROM:CAD3                 ld      a, (ix+7)
      A = peek(z80.registers.ix + 7);
//ROM:CAD6                 or      (ix+8)
      A |= peek(z80.registers.ix + 8);
//ROM:CAD9                 jp      z, loc_CB5C
      if (!A)
        goto loc_CB5C;
//ROM:CADC                 bit     2, (ix+0Eh)
//ROM:CAE0                 jp      nz, loc_CB5C
      if (peek(z80.registers.ix + 0xe) & 0x4)
        goto loc_CB5C;
//ROM:CAE3                 ld      l, (ix+0Ch)
//ROM:CAE6                 ld      h, (ix+0Dh)
      z80.registers.hl = peek2(z80.registers.ix + 0xc);
//ROM:CAE9
//ROM:CAE9 loc_CAE9:                               ; CODE XREF: PlayChannel+6Fj
//ROM:CAE9                                         ; PlayChannel+7Aj
//ROM:CAE9                                         ; PlayChannel+86j
//ROM:CAE9                                         ; PlayChannel+96j
loc_CAE9:
//ROM:CAE9                 ld      a, (hl)
      A = peek(z80.registers.hl);
//ROM:CAEA                 inc     hl
      ++z80.registers.hl;
//ROM:CAEB                 ld      (ix+0Ch), l
//ROM:CAEE                 ld      (ix+0Dh), h
      poke2(z80.registers.ix + 0xc, z80.registers.hl);
//ROM:CAF1                 cp      80h ; 'À'
//ROM:CAF3                 jr      nz, loc_CAFB
      if (A != 0x80)
      {
//ROM:CAFB                 cp      82h ; 'Â'
//ROM:CAFD                 jp      nz, loc_CB07
        if (A != 0x82)
        {
//ROM:CB07                 cp      83h ; 'Ã'
//ROM:CB09                 jp      nz, loc_CB13
          if (A != 0x83)
          {
//ROM:CB13                 cp      84h ; 'Ä'
//ROM:CB15                 jp      nz, loc_CB23
            if (A != 0x84)
            {
//ROM:CB23                 bit     3, (ix+0Eh)
//ROM:CB27                 jp      z, loc_CB45
              if (!(peek(z80.registers.ix + 0xe) & 8))
              {
//ROM:CB45                 ld      e, a
//ROM:CB46                 ld      d, 0
//ROM:CB48                 ld      l, (ix+7)
//ROM:CB4B                 ld      h, (ix+8)
                z80.registers.hl = ;
//ROM:CB4E                 and     80h ; 'À'
//ROM:CB50                 jp      z, loc_CB55
//ROM:CB53                 ld      d, 0FFh
//ROM:CB55                 add     hl, de
                z80.registers.de = (int8)A;
                z80.registers.hl = peek2(z80.registers.ix + 7) + z80.registers.de;
//ROM:CB56                 ld      (ix+7), l
//ROM:CB59                 ld      (ix+8), h
                poke2(z80.registers.ix + 7, z80.registers.hl);
//ROM:CB5C
                goto loc_CB5C;
              }
//ROM:CB2A                 add     a, (ix+12h)
              A += peek(z80.registers.ix + 0x12);
//ROM:CB2D                 ld      (ix+12h), a
              poke(z80.registers.ix + 0x12, A);
//ROM:CB30                 dec     a
              --A;
//ROM:CB31                 add     a, a
              A *= 2;
//ROM:CB32                 ld      e, a
//ROM:CB33                 ld      d, 0
              z80.registers.de = A;
//ROM:CB35                 ld      hl, 0C976h
              z80.registers.hl = 0xc976;
//ROM:CB38                 add     hl, de
              z80.registers.hl += z80.registers.de;
//ROM:CB39                 ld      a, (hl)
              A = peek(z80.registers.hl);
//ROM:CB3A                 ld      (ix+7), a
              poke(z80.registers.ix + 7, A);
//ROM:CB3D                 inc     hl
              ++z80.registers.hl;
//ROM:CB3E                 ld      a, (hl)
              A = peek(z80.registers.hl);
//ROM:CB3F                 ld      (ix+8), a
              poke(z80.registers.ix + 8, A);
//ROM:CB42                 jp      loc_CB5C
              goto loc_CB5C;
            }
//ROM:CB18                 ld      a, 9
//ROM:CB1A                 xor     (ix+3)
//ROM:CB1D                 ld      (ix+3), a
            A = 9 ^ peek(z80.registers.ix + 3);
            poke(z80.registers.ix + 3, A);
//ROM:CB20                 jp      loc_CAE9
            goto loc_CAE9;
          }
//ROM:CB0C                 res     3, (ix+0Eh)
          poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) & ~8);
//ROM:CB10                 jp      loc_CAE9
          goto loc_CAE9;
        }
//ROM:CB00                 set     3, (ix+0Eh)
        poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) | 8);
//ROM:CB04                 jp      loc_CAE9
        goto loc_CAE9;
      }
//ROM:CAF5                 ld      a, (hl)
      A = peek(z80.registers.hl);
//ROM:CAF6                 inc     hl
      ++z80.registers.hl;
//ROM:CAF7                 ld      h, (hl)
      z80.registers.h = peek(z80.registers.hl);
//ROM:CAF8                 ld      l, a
      z80.registers.l = A;
//ROM:CAF9                 jr      loc_CAE9
      goto loc_CAE9;
    }
//ROM:CAB8                 sub     32h ; '2'
    A -= 0x32;
//ROM:CABA                 ld      (ix+9), a
    poke(z80.registers.ix + 9, A);
//ROM:CABD                 ld      (ix+6), 1
    poke(z80.registers.ix + 6, 1);
//ROM:CAC1                 inc     hl
    ++z80.registers.hl;
//ROM:CAC2                 jr      loc_CACD
    goto loc_CACD;
  }
//ROM:CAA6                 jr      nz, loc_CAB4
//ROM:CAA8                 inc     hl
  ++z80.registers.hl;
//ROM:CAA9                 ld      e, (hl)
  z80.registers.de = peek2(z80.registers.hl);
//ROM:CAAA                 inc     hl
  ++z80.registers.hl;
//ROM:CAAB                 ld      d, (hl)
//ROM:CAAC                 ld      (ix+4), e
//ROM:CAAF                 ld      (ix+5), d
  poke2(z80.registers.ix + 4, z80.registers.de);
//ROM:CAB2                 jr      loc_CA9D
  goto loc_CA9D;
loc_CB5C:
//ROM:CB5C                 ld      a, (byte_C8CE)
//ROM:CB5F                 ld      d, 6
//ROM:CB61                 call    WriteAYReg
  z80_write_ay_reg(6, peek(0xc8ce));
//ROM:CB64                 res     2, (ix+0Eh)
  poke(z80.registers.ix + 0xe, peek(z80.registers.ix + 0xe) & ~4);
//ROM:CB68                 ld      a, (byte_C8CF)
//ROM:CB6B                 add     a, 7
//ROM:CB6D                 ld      d, a
//ROM:CB6E                 ld      a, (ix+7)
//ROM:CB71                 or      (ix+8)
  A = peek(z80.registers.ix + 7) | peek(z80.registers.ix + 8);
//ROM:CB74                 jr      z, loc_CB79
//ROM:CB76                 ld      a, (ix+9)
  if (A)
    A = peek(z80.registers.ix + 9);
//ROM:CB79                 call    WriteAYReg
  z80_write_ay_reg(ch + 7, A);
//ROM:CB7C                 ld      a, (byte_C8CF)
//ROM:CB7F                 dec     a
//ROM:CB80                 add     a, a
//ROM:CB81                 ld      d, a
//ROM:CB82                 ld      a, (ix+7)
//ROM:CB85                 call    WriteAYReg
  z80_write_ay_reg(2 * (ch - 1), peek(z80.registers.ix + 7));
//ROM:CB88                 inc     d
//ROM:CB89                 ld      a, (ix+8)
//ROM:CB8C                 call    WriteAYReg
  z80_write_ay_reg(2 * (ch - 1) + 1, peek(z80.registers.ix + 8));
//ROM:CB8F                 jp      restoreSPandRet
//ROM:CA7E                 ld      (spNew), sp
  spNew = z80.registers.sp;
//ROM:CA82                 ld      hl, (spNew)
  z80.registers.hl = spNew;
//ROM:CA85                 ld      sp, (spSaved)
  z80.registers.sp = spSaved + 2;
}

void z80_int()
{
//ROM:CA1E                 ld      ix, word_C93A
  z80.registers.ix = 0xc93a;
//ROM:CA22                 ld      hl, (word_C8D4)
  z80.registers.hl = peek2(0xc8d4);
//ROM:CA25                 ld      a, 1
//ROM:CA27                 call    sub_CA8A
  z80_sub_ca8a(1);
//ROM:CA2A                 ld      (word_C8D4), hl
  poke2(0xc8d4, z80.registers.hl);
//ROM:CA2D                 ld      ix, word_C94E
  z80.registers.ix = 0xc94e;
//ROM:CA31                 ld      hl, (word_C8D6)
  z80.registers.hl = peek2(0xc8d6);
//ROM:CA34                 ld      a, 2
//ROM:CA36                 call    sub_CA8A
  z80_sub_ca8a(2);
//ROM:CA39                 ld      (word_C8D6), hl
  poke2(0xc8d6, z80.registers.hl);
//ROM:CA3C                 ld      ix, word_C962
  z80.registers.ix = 0xc962;
//ROM:CA40                 ld      hl, (word_C8D8)
  z80.registers.hl = peek2(0xc8d8);
//ROM:CA43                 ld      a, 3
//ROM:CA45                 call    sub_CA8A
  z80_sub_ca8a(3);
//ROM:CA48                 ld      (word_C8D8), hl
  poke2(0xc8d8, z80.registers.hl);
//ROM:CA4B                 ld      a, (byte_C965)
  A = peek(0xc965);
//ROM:CA4E                 rlca
//ROM:CA4F                 ld      b, a
  z80.registers.b = (A << 1) | ((A >> 7) & 1);
//ROM:CA50                 ld      a, (byte_C951)
//ROM:CA53                 or      b
  A = peek(0xc951) | z80.registers.b;
//ROM:CA54                 rlca
//ROM:CA55                 ld      b, a
  z80.registers.b = (A << 1) | ((A >> 7) & 1);
//ROM:CA56                 ld      a, (byte_C93D)
//ROM:CA59                 or      b
//ROM:CA5A                 ld      d, 7
//ROM:CA5C                 call    WriteAYReg
  z80_write_ay_reg(7, peek(0xc93d) | z80.registers.b);
  for (int i = 0 ; i < 15 ; ++i)
  {
    send_data(i, ayregs[i]);
  }
}

void loop()
{
  // too slow
  // emulate();

  // non-translated code
  z80_init();
  // translted code
  z80.registers.sp = 0xfffe;
  while (1)
  {
    z80_int();
  }
}

